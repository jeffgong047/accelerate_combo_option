
Generating frontier for markets:   0%|                                                                      | 0/20 [00:00<?, ?it/s]
There are 25 buy orders and 25 sell orders
#####Generating combinatorial/book/STOCK_2_SEED_2_book_AAPL_MSFT.npy with size 50 and noise 0.015625#####
Starting async computation for iteration 0
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(158)<module>()
-> market = Market(pd.concat([opt_buy_book_df, opt_sell_book_df], ignore_index=False),mechanism_solver=mechanism_solver_combo)
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(159)<module>()
-> is_match, profit = market.check_match()
Set parameter Username
Academic license - for non-commercial use only - expires 2025-11-08
checking match True 10.303087110713317
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(160)<module>()
-> if is_match:
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(161)<module>()
-> market.remove_matched_orders()
buy_book_index: [2, 15], sell_book_index: [4, 5, 8, 9, 10, 12, 15, 19, 20, 22, 24]
> /common/home/hg343/Research/accelerate_combo_option/src/market.py(67)remove_matched_orders()
-> shared_index = set(buy_book_index) & set(sell_book_index)
 54  	    def remove_matched_orders(self, orders: pd.DataFrame=None, matched_orders_index: list=None):
 55  	        '''
 56  	        Remove the matched orders from the market
 57  	        '''
 58  	        if orders is None:
 59  	            assert matched_orders_index is None, "matched_orders_index should be None if orders is None"
 60  	            orders = self.opt_order
 61  	            isMatch, profit, matched_order_index =  self.apply_mechanism(orders, offset = False, show_matched_orders=True)
 62  	        buy_book_index = matched_order_index['buy_book_index']
 63  	        sell_book_index = matched_order_index['sell_book_index']
 64  	        print(f'buy_book_index: {buy_book_index}, sell_book_index: {sell_book_index}')
 65  	        breakpoint()
 66  	        #sanity check: ensure buy and sell book index are not the same.
 67  ->	        shared_index = set(buy_book_index) & set(sell_book_index)
 68  	        assert len(shared_index) == 0, "buy and sell book index should not have any shared index"
 69  	        orders.drop(buy_book_index, inplace=True)
 70  	        orders.drop(sell_book_index, inplace=True)
Generating frontier for markets:   0%|                                                                      | 0/20 [35:45<?, ?it/s]
Traceback (most recent call last):
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 161, in <module>
    market.remove_matched_orders()
  File "/common/home/hg343/Research/accelerate_combo_option/src/market.py", line 67, in remove_matched_orders
    shared_index = set(buy_book_index) & set(sell_book_index)
  File "/common/home/hg343/Research/accelerate_combo_option/src/market.py", line 67, in remove_matched_orders
    shared_index = set(buy_book_index) & set(sell_book_index)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit