
Generating frontier for markets:   0%|                                                               | 0/20 [00:00<?, ?it/s]
There are 25 buy orders and 25 sell orders
#####Generating market 0 with size 50 and noise 0.015625#####
Starting computation for iteration 0
Generating frontier for markets:   0%|                                                               | 0/20 [00:00<?, ?it/s]/common/home/hg343/Research/accelerate_combo_option/src/market.py:264: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  frontier_labels = pd.Series(None, index=orders.index)
checking match False -0.0
Processing order 0 (1/37)
checking match False -0.0
quote_price: 69.50942087657864, original_price: 68.04
Processing order 1 (2/37)
checking match False -0.0
quote_price: 62.48707286113185, original_price: 63.33
Processing order 3 (3/37)
checking match False -0.0
quote_price: 34.511693024402106, original_price: 36.19
Processing order 4 (4/37)
checking match False -0.0
quote_price: 154.9203211239339, original_price: 156.18
Processing order 5 (5/37)
checking match False -0.0
quote_price: 182.322830549896, original_price: 186.12
Processing order 6 (6/37)
checking match False -0.0
quote_price: 18.90034230810692, original_price: 19.82
Processing order 7 (7/37)
checking match False -0.0
quote_price: 180.87296302568814, original_price: 182.73
Processing order 8 (8/37)
checking match False -0.0
quote_price: 105.08140564471498, original_price: 107.05
Processing order 9 (9/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.52
Processing order 10 (10/37)
checking match False -0.0
quote_price: 15.201653626839953, original_price: 22.92
Processing order 11 (11/37)
checking match False -0.0
quote_price: 104.6923329186927, original_price: 106.16
Processing order 12 (12/37)
checking match False -0.0
quote_price: 51.57869766513667, original_price: 53.02
Processing order 13 (13/37)
checking match False -0.0
quote_price: -0.0, original_price: 2.35
Processing order 14 (14/37)
checking match False -0.0
Mechanism solver timed out after 30 seconds
Timeout in mechanism solver for buy order quote
Timeout in price quote for order 14
Processing order 16 (15/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.02
Processing order 17 (16/37)
checking match False -0.0
quote_price: 222.8740224606763, original_price: 226.09
Processing order 18 (17/37)
checking match False -0.0
quote_price: 55.9843771268775, original_price: 57.9
Processing order 19 (18/37)
checking match False -0.0
quote_price: 169.4620698518357, original_price: 169.38
Processing order 20 (19/37)
checking match False -0.0
quote_price: 32.276528696461384, original_price: 28.41
Processing order 21 (20/37)
checking match False -0.0
quote_price: 77.16105947573753, original_price: 73.64
Processing order 22 (21/37)
checking match False -0.0
quote_price: 155.80588433464325, original_price: 156.52
Processing order 23 (22/37)
checking match False -0.0
quote_price: 89.38759856041953, original_price: 90.72
Processing order 24 (23/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.3
Processing order 25 (24/37)
checking match False -0.0
quote_price: 0.0, original_price: 53.73
Processing order 26 (25/37)
checking match False -0.0
quote_price: 0.0, original_price: 149.36
Processing order 27 (26/37)
checking match False -0.0
quote_price: 0.0, original_price: 11.82
Processing order 28 (27/37)
checking match False -0.0
quote_price: 0.0, original_price: 1.03
Processing order 31 (28/37)
checking match False -0.0
quote_price: 0.0, original_price: 174.67
Processing order 32 (29/37)
checking match False -0.0
quote_price: 0.0, original_price: 176.88
Processing order 36 (30/37)
checking match False -0.0
quote_price: 0.0, original_price: 30.24
Processing order 38 (31/37)
checking match False -0.0
quote_price: 0.0, original_price: 10.59
Processing order 39 (32/37)
checking match False -0.0
Mechanism solver timed out after 30 seconds
Timeout in mechanism solver for sell order quote
Timeout in price quote for order 39
Processing order 41 (33/37)
checking match False -0.0
quote_price: 0.0, original_price: 1.24
Processing order 42 (34/37)
checking match False -0.0
quote_price: 0.0, original_price: 13.98
Processing order 43 (35/37)
checking match False -0.0
quote_price: 0.0, original_price: 26.91
Processing order 46 (36/37)
checking match False -0.0
quote_price: 0.0, original_price: 69.58
Processing order 48 (37/37)
checking match False -0.0
Generating frontier for markets:   5%|██▋                                                   | 1/20 [02:24<45:52, 144.86s/it]
quote_price: 0.0, original_price: 9.87
    option1  option2  C=Call, P=Put  ...  B/A_price  liquidity  belongs_to_frontier
0      -3.0      5.0           -1.0  ...      68.04          1                  0.0
1       1.0      3.0            1.0  ...      63.33          1                  1.0
3       2.0     -1.0           -1.0  ...      36.19          1                  1.0
4      -2.0      9.0            1.0  ...     156.18          1                  1.0
5       1.0      7.0            1.0  ...     186.12          1                  1.0
6       2.0     -1.0           -1.0  ...      19.82          1                  1.0
7       6.0      5.0            1.0  ...     182.73          1                  1.0
8       3.0      1.0            1.0  ...     107.05          1                  1.0
9       1.0      1.0            1.0  ...       0.52          1                  1.0
10      4.0      1.0           -1.0  ...      22.92          1                  1.0
11      3.0      2.0            1.0  ...     106.16          1                  1.0
12      3.0      1.0           -1.0  ...      53.02          1                  1.0
13      2.0     -1.0           -1.0  ...       2.35          1                  1.0
14      1.0     -2.0           -1.0  ...      65.73          1                  NaN
16      2.0      1.0           -1.0  ...       0.02          1                  1.0
17      7.0      5.0           -1.0  ...     226.09          1                  1.0
18      1.0      1.0           -1.0  ...      57.90          1                  1.0
19     -2.0      7.0            1.0  ...     169.38          1                  0.0
20     -5.0      7.0           -1.0  ...      28.41          1                  0.0
21      1.0      6.0           -1.0  ...      73.64          1                  0.0
22      4.0      9.0            1.0  ...     156.52          1                  1.0
23      5.0     -3.0            1.0  ...      90.72          1                  1.0
24      8.0      5.0           -1.0  ...       0.30          1                  1.0
25      2.0     -3.0           -1.0  ...      53.73          1                  1.0
26      3.0      2.0           -1.0  ...     149.36          1                  1.0
27      8.0     -7.0            1.0  ...      11.82          1                  1.0
28      1.0     -1.0            1.0  ...       1.03          1                  1.0
31      8.0     -5.0            1.0  ...     174.67          1                  1.0
32      3.0      8.0           -1.0  ...     176.88          1                  1.0
36     -4.0      7.0            1.0  ...      30.24          1                  1.0
38      6.0      1.0           -1.0  ...      10.59          1                  1.0
39      5.0     -1.0            1.0  ...       4.05          1                  NaN
41      2.0      1.0           -1.0  ...       1.24          1                  1.0
42      6.0      5.0            1.0  ...      13.98          1                  1.0
43      2.0      1.0           -1.0  ...      26.91          1                  1.0
46      4.0      7.0            1.0  ...      69.58          1                  1.0
48      8.0     -3.0           -1.0  ...       9.87          1                  1.0
[37 rows x 8 columns]
Iteration 0 returned None
There are 27 buy orders and 23 sell orders
#####Generating market 1 with size 50 and noise 0.015625#####
Starting computation for iteration 1
Generating frontier for markets:   5%|██▋                                                   | 1/20 [02:24<45:52, 144.86s/it]/common/home/hg343/Research/accelerate_combo_option/src/market.py:264: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  frontier_labels = pd.Series(None, index=orders.index)
checking match False -0.0
Processing order 1 (1/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.53
Processing order 2 (2/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.03
Processing order 3 (3/37)
checking match False -0.0
quote_price: 41.87701627381539, original_price: 45.18
Processing order 4 (4/37)
checking match False -0.0
quote_price: 19.627280064401653, original_price: 20.76
Processing order 5 (5/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.09
Processing order 6 (6/37)
checking match False -0.0
quote_price: 15.61016169525077, original_price: 13.61
Processing order 7 (7/37)
checking match False -0.0
quote_price: 0.03, original_price: 0.03
Processing order 8 (8/37)
checking match False -0.0
quote_price: 40.300619374815774, original_price: 41.36
Processing order 9 (9/37)
checking match False -0.0
quote_price: 57.90864958972896, original_price: 58.19
Processing order 10 (10/37)
checking match False -0.0
quote_price: 146.88350482347585, original_price: 147.13
Processing order 13 (11/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.02
Processing order 14 (12/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.06
Processing order 15 (13/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.04
Processing order 16 (14/37)
checking match False -0.0
quote_price: 69.24168589892953, original_price: 63.68
Processing order 17 (15/37)
checking match False -0.0
quote_price: 127.650485754893, original_price: 141.41
Processing order 18 (16/37)
checking match False -0.0
quote_price: 84.4835497450423, original_price: 87.64
Processing order 19 (17/37)
checking match False -0.0
quote_price: -0.0, original_price: 0.08
Processing order 20 (18/37)
checking match False -0.0
quote_price: -0.0, original_price: 3.11
Processing order 21 (19/37)
checking match False -0.0
quote_price: 175.13069420653088, original_price: 218.33
Processing order 22 (20/37)
checking match False -0.0
quote_price: 2.892639917375713, original_price: 7.03
Processing order 23 (21/37)
checking match False -0.0
quote_price: -0.0, original_price: 3.78
Processing order 24 (22/37)
checking match False -0.0
quote_price: 147.18672117476743, original_price: 154.96
Processing order 25 (23/37)
checking match False -0.0
quote_price: 21.54100844223451, original_price: 22.04
Processing order 26 (24/37)
checking match False -0.0
quote_price: 193.1680635310617, original_price: 191.55
Processing order 28 (25/37)
checking match False -0.0
quote_price: 0.0, original_price: 5.0
Processing order 29 (26/37)
checking match False -0.0
quote_price: 0.0, original_price: 433.82
Processing order 31 (27/37)
checking match False -0.0
quote_price: 0.0, original_price: 14.93
Processing order 33 (28/37)
checking match False -0.0
quote_price: 0.0, original_price: 21.06
Processing order 35 (29/37)
checking match False -0.0
quote_price: 0.0, original_price: 2.19
Processing order 37 (30/37)
checking match False -0.0
quote_price: 0.0, original_price: 2.33
Processing order 39 (31/37)
checking match False -0.0
quote_price: 0.0, original_price: 0.15
Processing order 42 (32/37)
checking match False -0.0
quote_price: 0.0, original_price: 90.03
Processing order 43 (33/37)
checking match False -0.0
quote_price: 0.0, original_price: 2.41
Processing order 44 (34/37)
checking match False -0.0
quote_price: 0.0, original_price: 62.63
Processing order 47 (35/37)
checking match False -0.0
quote_price: 0.0, original_price: 40.26
Processing order 48 (36/37)
checking match False -0.0
quote_price: 0.0, original_price: 6.37
Processing order 49 (37/37)
checking match False -0.0
quote_price: 0.0, original_price: 0.11
    option1  option2  C=Call, P=Put  ...  B/A_price  liquidity  belongs_to_frontier
1       5.0      2.0           -1.0  ...       0.53          1                  1.0
2       2.0     -1.0            1.0  ...       0.03          1                  1.0
3       1.0      3.0            1.0  ...      45.18          1                  1.0
4       1.0      1.0           -1.0  ...      20.76          1                  1.0
5       8.0     -7.0            1.0  ...       0.09          1                  1.0
6      -1.0      2.0           -1.0  ...      13.61          1                  0.0
7       2.0     -1.0            1.0  ...       0.03          1                  0.0
8       3.0      7.0            1.0  ...      41.36          1                  1.0
9       4.0      1.0            1.0  ...      58.19          1                  1.0
10      7.0      2.0            1.0  ...     147.13          1                  1.0
13      3.0     -1.0           -1.0  ...       0.02          1                  1.0
14     -1.0      9.0           -1.0  ...       0.06          1                  1.0
15      3.0      1.0           -1.0  ...       0.04          1                  1.0
16      4.0     -5.0            1.0  ...      63.68          1                  0.0
17      9.0     -2.0           -1.0  ...     141.41          1                  1.0
18      3.0      1.0            1.0  ...      87.64          1                  1.0
19      5.0      4.0           -1.0  ...       0.08          1                  1.0
20      5.0      1.0            1.0  ...       3.11          1                  1.0
21      5.0     -3.0           -1.0  ...     218.33          1                  1.0
22      3.0     -4.0           -1.0  ...       7.03          1                  1.0
23      4.0     -3.0           -1.0  ...       3.78          1                  1.0
24      4.0      5.0            1.0  ...     154.96          1                  1.0
25      1.0     -1.0           -1.0  ...      22.04          1                  1.0
26      9.0     -2.0            1.0  ...     191.55          1                  0.0
28      8.0     -3.0           -1.0  ...       5.00          1                  1.0
29      9.0      2.0           -1.0  ...     433.82          1                  1.0
31      2.0      3.0            1.0  ...      14.93          1                  1.0
33      2.0     -1.0            1.0  ...      21.06          1                  1.0
35      3.0     -1.0           -1.0  ...       2.19          1                  1.0
37      8.0      9.0           -1.0  ...       2.33          1                  1.0
39     -1.0      3.0           -1.0  ...       0.15          1                  1.0
42      9.0      8.0            1.0  ...      90.03          1                  1.0
43      7.0      2.0           -1.0  ...       2.41          1                  1.0
44      9.0      7.0           -1.0  ...      62.63          1                  1.0
47      1.0      4.0            1.0  ...      40.26          1                  1.0
48      5.0      8.0           -1.0  ...       6.37          1                  1.0
49      7.0     -4.0            1.0  ...       0.11          1                  1.0
[37 rows x 8 columns]
Successfully completed iteration 1
1
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(168)<module>()
-> if not os.path.exists(directory_path):
163  	                                frontier_option_label = market.epsilon_frontierGeneration(offset=args.offset)
164  	                                if frontier_option_label is not None and not np.isnan(frontier_option_label['belongs_to_frontier']).any():
165  	                                    print(f"Successfully completed iteration {market_index}")
166  	                                    print(market_index)
167  	                                    breakpoint()
168  ->	                                    if not os.path.exists(directory_path):
169  	                                        os.makedirs(directory_path)
170  	
171  	                                    save_path = os.path.join(directory_path, filename + '.pkl')
172  	                                    print(f"Saving to: {save_path}")
173  	
  1  	import pdb
  2  	import pickle
  3  	import argparse
  4  	import pandas as pd
  5  	import numpy as np
  6  	import random
  7  	import math
  8  	import os.path
  9  	from combinatorial.gen_synthetic_combo_options import gen_synthetic_combo_options
 10  	from combinatorial.synthetic_combo_mip_match import synthetic_combo_match_mip
 11  	from mechanism_solver import mechanism_solver_combo
 12  	from gurobipy import *
 13  	import timeit
 14  	from copy import deepcopy
 15  	from tqdm import tqdm
 16  	# Run in a separate process with timeout
 17  	from multiprocessing import Process, Queue, Pool
 18  	import multiprocessing as mp
 19  	import queue
 20  	import traceback
 21  	from contextlib import contextmanager
 22  	import signal
 23  	import sys
 24  	from multiprocessing import Pool, TimeoutError
 25  	import itertools
 26  	import wandb
 27  	import os
 28  	from market import Market
 29  	from combo_stock_frontier_data_preprocessor import synthetic_combo_frontier_generation
 30  	# Add this function to parse command line arguments
 31  	def parse_arguments():
 32  	    parser = argparse.ArgumentParser(description='Process stock options.')
 33  	    parser.add_argument('--num_stocks', type=int, default=2, help='Number of stocks to process (default: 3)')
 34  	    parser.add_argument('--market_size', type=int, default=50, help='Number of orders in the market')
 35  	    parser.add_argument('--offset', type=bool, default=False, help='Whether to allow offset for liability in the optimization')
 36  	    parser.add_argument('--wandb_project', type=str, default='expediating_comb_financial_market_matching', help='Wandb project name')
 37  	    parser.add_argument('--num_orders', type=int, default=5000, help='number of orders in the orderbook')
 38  	    parser.add_argument('--noise', type=float, default=2**-6, help='noise level in the orderbook')
 39  	    return parser.parse_args()
 40  	
 41  	# Move the main execution code inside if __name__ == '__main__':
 42  	args = parse_arguments()
 43  	
 44  	
 45  	
 46  	# Set wandb API key programmatically
 47  	os.environ["WANDB_API_KEY"] = "d1cb0d609d7b64218fe82a45a54e57f47e2d26da"
 48  	
 49  	try:
 50  	    wandb.login()  # This will now use the API key we just set
 51  	except wandb.errors.AuthError:
 52  	    print("Could not authenticate with wandb. Invalid API key")
 53  	    sys.exit(1)
 54  	
 55  	def signal_handler(signum, frame):
 56  	    print("Ctrl+C received. Terminating processes...")
 57  	    if 'pool' in globals():
 58  	        pool.terminate()
 59  	        pool.join()
 60  	    sys.exit(1)
 61  	
 62  	# Register the signal handler
 63  	signal.signal(signal.SIGINT, signal_handler)
 64  	
 65  	
 66  	
 67  	
 68  	
 69  	
 70  	def add_noise_orderbook(opt_book, NOISE=0.01):
 71  	    SEED = 1
 72  	    random.seed(SEED)
 73  	    # coeff up to len(stock_list); call/put; strike; buy/sell; price (bid/ask)
 74  	    opt_buy_book, opt_sell_book = opt_book[opt_book[:, -2]==1], opt_book[opt_book[:, -2]==0]
 75  	    num_buy, num_sell = len(opt_buy_book), len(opt_sell_book)
 76  	    # add noise
 77  	    buy_noise = [random.random()*NOISE+1 for i in range(num_buy)]
 78  	    opt_buy_book[:, -1] = np.round(buy_noise * opt_buy_book[:, -1], 2)
 79  	    sell_noise = [1-random.random()*NOISE for i in range(num_sell)]
 80  	    opt_sell_book[:, -1] = np.round(sell_noise * opt_sell_book[:, -1], 2)
 81  	    print('There are {} buy orders and {} sell orders'.format(num_buy, num_sell))
 82  	    return opt_buy_book, opt_sell_book
 83  	
 84  	
 85  	
 86  	@contextmanager
 87  	def pool_context(processes=None):
 88  	    pool = mp.Pool(processes=processes)
 89  	    try:
 90  	        yield pool
 91  	    finally:
 92  	        pool.terminate()
 93  	        pool.join()
 94  	
 95  	# Parameter lists
 96  	# NUM_STOCK_LIST = [2] #, 4, 8, 12, 16, 20]  # 12, 16, 20
 97  	# BOOK_SIZE_LIST = [50] #,150, 200, 250, 300, 350, 400]
 98  	# NOISE_LIST = [2**-6]#[2**-7, 2**-6, 2**-5, 2**-4, 2**-3]
 99  	
100  	
101  	
102  	if __name__ == '__main__':
103  	    NUM_STOCK = args.num_stocks
104  	    MARKET_SIZE = args.market_size
105  	    NOISE = args.noise
106  	    BOOK_SIZE = args.market_size
107  	
108  	    tasks = {}
109  	    directory_path = f'/common/home/hg343/Research/accelerate_combo_option/data/combo_2_test'
110  	
111  	    try:
112  	        with wandb.init(
113  	            project=args.wandb_project,
114  	            name=f"combo_frontier_num_stock_{NUM_STOCK}_noise_{NOISE}_market_size_{MARKET_SIZE}",
115  	        ) as run:
116  	            selection = ['AAPL', 'AXP', 'BA', 'DIS', 'GS', 'HD', 'IBM', 'JNJ', 'JPM', 'KO', 'MCD', 'MMM', 'MSFT', 'NKE', 'PG', 'RTX', 'VZ', 'WBA', 'WMT', 'XOM']
117  	            stock_list = ['AAPL', 'MSFT']
118  	            combinations_string = '_'.join(stock_list)
119  	
120  	            with pool_context(processes=20) as pool:
121  	                for i in range(2, 14):
122  	                    try:
123  	                        filename = f'combinatorial/book/STOCK_2_SEED_{i}_book_{combinations_string}.npy'
124  	                        if os.path.isfile(filename):
125  	                            opt_book = np.load(filename)
126  	                        else:
127  	                            print('File not found')
128  	                            opt_book, stock_list = gen_synthetic_combo_options(NUM_ST=NUM_STOCK, NUM_ORDER=args.num_orders, combinations=stock_list, SEED=i)
129  	                            np.save(filename, opt_book)
130  	
131  	                        num_books = len(opt_book)//50
132  	                        artifact = wandb.Artifact(
133  	                            name=f"combo_frontier_{'_'.join(stock_list)}_size_{BOOK_SIZE}_noise_{NOISE}",
134  	                            type="dataset",
135  	                            description="Collection of frontier options training data for different markets",
136  	                            metadata={
137  	                                'num_stock': NUM_STOCK,
138  	                                'stock_name': '_'.join(stock_list),
139  	                                'noise': NOISE,
140  	                                'book_size': BOOK_SIZE,
141  	                                'total_markets': num_books
142  	                            }
143  	                        )
144  	
145  	                        for market_index in tqdm(range(0, num_books), desc=f'Generating frontier for markets'):
146  	                            try:
147  	                                stock_name = '_'.join(stock_list)
148  	                                opt_book_1 = opt_book[market_index*MARKET_SIZE:(market_index+1)*MARKET_SIZE]
149  	                                opt_buy_book, opt_sell_book = add_noise_orderbook(opt_book_1, NOISE)
150  	
151  	                                print(f'#####Generating market {market_index} with size {BOOK_SIZE} and noise {NOISE}#####')
152  	                                print(f"Starting computation for iteration {market_index}")
153  	
154  	                                filename = f'corrected_testing_combo_frontier_market_index_{market_index}_book_size_{BOOK_SIZE}_{stock_name}_NOISE_{NOISE}'
155  	                                column_names = ['option1', 'option2', 'C=Call, P=Put', 'Strike Price of the Option Times 1000', 'transaction_type', 'B/A_price']
156  	                                opt_order_df = pd.DataFrame(np.concatenate([opt_buy_book, opt_sell_book], axis=0), columns=column_names)
157  	
158  	                                market = Market(opt_order_df, mechanism_solver=mechanism_solver_combo)
159  	                                is_match, profit = market.check_match()
160  	                                if is_match:
161  	                                    market.remove_matched_orders()
162  	
163  	                                frontier_option_label_epsilon = market.epsilon_frontierGeneration(offset=args.offset)
164  	                                frontier_option_regular = market.frontierGeneration(offset=args.offset)
165  	                                frontier_option_label_compared = synthetic_combo_frontier_generation(opt_buy_book, opt_sell_book, opt_l = opt_l, debug=0)
166  	                                if frontier_option_label_epsilon is not None and not np.isnan(frontier_option_label_epsilon['belongs_to_frontier']).any():
167  	                                    print(f"Successfully completed iteration {market_index}")
168  ->	                                    print(market_index)
169  	                                    breakpoint()
170  	                                    if not os.path.exists(directory_path):
171  	                                        os.makedirs(directory_path)
172  	
173  	                                    save_path = os.path.join(directory_path, filename + '.pkl')
174  	                                    print(f"Saving to: {save_path}")
175  	
176  	                                    with open(save_path, 'wb') as f:
177  	                                        pickle.dump(frontier_option_label, f)
178  	
179  	                                    wandb.log({
180  	                                        f'market_{market_index}/metadata': {
181  	                                            'num_stock': NUM_STOCK,
182  	                                            'stock_name': stock_name,
183  	                                            'noise': NOISE,
184  	                                            'book_size': BOOK_SIZE,
185  	                                            'market_index': market_index
186  	                                        }
187  	                                    })
188  	
189  	                                    artifact.add_file(save_path, name=f'{filename}.pkl')
190  	                                    print(f"Successfully saved iteration {market_index}")
191  	                                    breakpoint()
192  	                                else:
193  	                                    print(f"Iteration {market_index} returned None")
194  	
195  	                            except TimeoutError:
196  	                                print(f"Market {market_index} processing timed out")
197  	                                continue
198  	                            except Exception as e:
199  	                                print(f"Error processing market {market_index}: {str(e)}")
200  	                                traceback.print_exc()
201  	                                continue
202  	
203  	                        run.log_artifact(artifact)
204  	
205  	                    except Exception as e:
206  	                        print(f"Error processing seed {i}: {str(e)}")
207  	                        traceback.print_exc()
208  	                        continue
209  	
210  	    except Exception as e:
211  	        print(f"Error in main: {str(e)}")
212  	        traceback.print_exc()
213  	        raise e
*** NameError: name 'frontier_option_label_epsilon' is not defined
  1  	import pdb
  2  	import pickle
  3  	import argparse
  4  	import pandas as pd
  5  	import numpy as np
  6  	import random
  7  	import math
  8  	import os.path
  9  	from combinatorial.gen_synthetic_combo_options import gen_synthetic_combo_options
 10  	from combinatorial.synthetic_combo_mip_match import synthetic_combo_match_mip
 11  	from mechanism_solver import mechanism_solver_combo
 12  	from gurobipy import *
 13  	import timeit
 14  	from copy import deepcopy
 15  	from tqdm import tqdm
 16  	# Run in a separate process with timeout
 17  	from multiprocessing import Process, Queue, Pool
 18  	import multiprocessing as mp
 19  	import queue
 20  	import traceback
 21  	from contextlib import contextmanager
 22  	import signal
 23  	import sys
 24  	from multiprocessing import Pool, TimeoutError
 25  	import itertools
 26  	import wandb
 27  	import os
 28  	from market import Market
 29  	from combo_stock_frontier_data_preprocessor import synthetic_combo_frontier_generation
 30  	# Add this function to parse command line arguments
 31  	def parse_arguments():
 32  	    parser = argparse.ArgumentParser(description='Process stock options.')
 33  	    parser.add_argument('--num_stocks', type=int, default=2, help='Number of stocks to process (default: 3)')
 34  	    parser.add_argument('--market_size', type=int, default=50, help='Number of orders in the market')
 35  	    parser.add_argument('--offset', type=bool, default=False, help='Whether to allow offset for liability in the optimization')
 36  	    parser.add_argument('--wandb_project', type=str, default='expediating_comb_financial_market_matching', help='Wandb project name')
 37  	    parser.add_argument('--num_orders', type=int, default=5000, help='number of orders in the orderbook')
 38  	    parser.add_argument('--noise', type=float, default=2**-6, help='noise level in the orderbook')
 39  	    return parser.parse_args()
 40  	
 41  	# Move the main execution code inside if __name__ == '__main__':
 42  	args = parse_arguments()
 43  	
 44  	
 45  	
 46  	# Set wandb API key programmatically
 47  	os.environ["WANDB_API_KEY"] = "d1cb0d609d7b64218fe82a45a54e57f47e2d26da"
 48  	
 49  	try:
 50  	    wandb.login()  # This will now use the API key we just set
 51  	except wandb.errors.AuthError:
 52  	    print("Could not authenticate with wandb. Invalid API key")
 53  	    sys.exit(1)
 54  	
 55  	def signal_handler(signum, frame):
 56  	    print("Ctrl+C received. Terminating processes...")
 57  	    if 'pool' in globals():
 58  	        pool.terminate()
 59  	        pool.join()
 60  	    sys.exit(1)
 61  	
 62  	# Register the signal handler
 63  	signal.signal(signal.SIGINT, signal_handler)
 64  	
 65  	
 66  	
 67  	
 68  	
 69  	
 70  	def add_noise_orderbook(opt_book, NOISE=0.01):
 71  	    SEED = 1
 72  	    random.seed(SEED)
 73  	    # coeff up to len(stock_list); call/put; strike; buy/sell; price (bid/ask)
 74  	    opt_buy_book, opt_sell_book = opt_book[opt_book[:, -2]==1], opt_book[opt_book[:, -2]==0]
 75  	    num_buy, num_sell = len(opt_buy_book), len(opt_sell_book)
 76  	    # add noise
 77  	    buy_noise = [random.random()*NOISE+1 for i in range(num_buy)]
 78  	    opt_buy_book[:, -1] = np.round(buy_noise * opt_buy_book[:, -1], 2)
 79  	    sell_noise = [1-random.random()*NOISE for i in range(num_sell)]
 80  	    opt_sell_book[:, -1] = np.round(sell_noise * opt_sell_book[:, -1], 2)
 81  	    print('There are {} buy orders and {} sell orders'.format(num_buy, num_sell))
 82  	    return opt_buy_book, opt_sell_book
 83  	
 84  	
 85  	
 86  	@contextmanager
 87  	def pool_context(processes=None):
 88  	    pool = mp.Pool(processes=processes)
 89  	    try:
 90  	        yield pool
 91  	    finally:
 92  	        pool.terminate()
 93  	        pool.join()
 94  	
 95  	# Parameter lists
 96  	# NUM_STOCK_LIST = [2] #, 4, 8, 12, 16, 20]  # 12, 16, 20
 97  	# BOOK_SIZE_LIST = [50] #,150, 200, 250, 300, 350, 400]
 98  	# NOISE_LIST = [2**-6]#[2**-7, 2**-6, 2**-5, 2**-4, 2**-3]
 99  	
100  	
101  	
102  	if __name__ == '__main__':
103  	    NUM_STOCK = args.num_stocks
104  	    MARKET_SIZE = args.market_size
105  	    NOISE = args.noise
106  	    BOOK_SIZE = args.market_size
107  	
108  	    tasks = {}
109  	    directory_path = f'/common/home/hg343/Research/accelerate_combo_option/data/combo_2_test'
110  	
111  	    try:
112  	        with wandb.init(
113  	            project=args.wandb_project,
114  	            name=f"combo_frontier_num_stock_{NUM_STOCK}_noise_{NOISE}_market_size_{MARKET_SIZE}",
115  	        ) as run:
116  	            selection = ['AAPL', 'AXP', 'BA', 'DIS', 'GS', 'HD', 'IBM', 'JNJ', 'JPM', 'KO', 'MCD', 'MMM', 'MSFT', 'NKE', 'PG', 'RTX', 'VZ', 'WBA', 'WMT', 'XOM']
117  	            stock_list = ['AAPL', 'MSFT']
118  	            combinations_string = '_'.join(stock_list)
119  	
120  	            with pool_context(processes=20) as pool:
121  	                for i in range(2, 14):
122  	                    try:
123  	                        filename = f'combinatorial/book/STOCK_2_SEED_{i}_book_{combinations_string}.npy'
124  	                        if os.path.isfile(filename):
125  	                            opt_book = np.load(filename)
126  	                        else:
127  	                            print('File not found')
128  	                            opt_book, stock_list = gen_synthetic_combo_options(NUM_ST=NUM_STOCK, NUM_ORDER=args.num_orders, combinations=stock_list, SEED=i)
129  	                            np.save(filename, opt_book)
130  	
131  	                        num_books = len(opt_book)//50
132  	                        artifact = wandb.Artifact(
133  	                            name=f"combo_frontier_{'_'.join(stock_list)}_size_{BOOK_SIZE}_noise_{NOISE}",
134  	                            type="dataset",
135  	                            description="Collection of frontier options training data for different markets",
136  	                            metadata={
137  	                                'num_stock': NUM_STOCK,
138  	                                'stock_name': '_'.join(stock_list),
139  	                                'noise': NOISE,
140  	                                'book_size': BOOK_SIZE,
141  	                                'total_markets': num_books
142  	                            }
143  	                        )
144  	
145  	                        for market_index in tqdm(range(0, num_books), desc=f'Generating frontier for markets'):
146  	                            try:
147  	                                stock_name = '_'.join(stock_list)
148  	                                opt_book_1 = opt_book[market_index*MARKET_SIZE:(market_index+1)*MARKET_SIZE]
149  	                                opt_buy_book, opt_sell_book = add_noise_orderbook(opt_book_1, NOISE)
150  	
151  	                                print(f'#####Generating market {market_index} with size {BOOK_SIZE} and noise {NOISE}#####')
152  	                                print(f"Starting computation for iteration {market_index}")
153  	
154  	                                filename = f'corrected_testing_combo_frontier_market_index_{market_index}_book_size_{BOOK_SIZE}_{stock_name}_NOISE_{NOISE}'
155  	                                column_names = ['option1', 'option2', 'C=Call, P=Put', 'Strike Price of the Option Times 1000', 'transaction_type', 'B/A_price']
156  	                                opt_order_df = pd.DataFrame(np.concatenate([opt_buy_book, opt_sell_book], axis=0), columns=column_names)
157  	
158  	                                market = Market(opt_order_df, mechanism_solver=mechanism_solver_combo)
159  	                                is_match, profit = market.check_match()
160  	                                if is_match:
161  	                                    market.remove_matched_orders()
162  	
163  	                                frontier_option_label_epsilon = market.epsilon_frontierGeneration(offset=args.offset)
164  	                                frontier_option_regular = market.frontierGeneration(offset=args.offset)
165  	                                frontier_option_label_compared = synthetic_combo_frontier_generation(opt_buy_book, opt_sell_book, opt_l = opt_l, debug=0)
166  	                                if frontier_option_label_epsilon is not None and not np.isnan(frontier_option_label_epsilon['belongs_to_frontier']).any():
167  	                                    print(f"Successfully completed iteration {market_index}")
168  ->	                                    print(market_index)
169  	                                    breakpoint()
170  	                                    if not os.path.exists(directory_path):
171  	                                        os.makedirs(directory_path)
172  	
173  	                                    save_path = os.path.join(directory_path, filename + '.pkl')
174  	                                    print(f"Saving to: {save_path}")
175  	
176  	                                    with open(save_path, 'wb') as f:
177  	                                        pickle.dump(frontier_option_label, f)
178  	
179  	                                    wandb.log({
180  	                                        f'market_{market_index}/metadata': {
181  	                                            'num_stock': NUM_STOCK,
182  	                                            'stock_name': stock_name,
183  	                                            'noise': NOISE,
184  	                                            'book_size': BOOK_SIZE,
185  	                                            'market_index': market_index
186  	                                        }
187  	                                    })
188  	
189  	                                    artifact.add_file(save_path, name=f'{filename}.pkl')
190  	                                    print(f"Successfully saved iteration {market_index}")
191  	                                    breakpoint()
192  	                                else:
193  	                                    print(f"Iteration {market_index} returned None")
194  	
195  	                            except TimeoutError:
196  	                                print(f"Market {market_index} processing timed out")
197  	                                continue
198  	                            except Exception as e:
199  	                                print(f"Error processing market {market_index}: {str(e)}")
200  	                                traceback.print_exc()
201  	                                continue
202  	
203  	                        run.log_artifact(artifact)
204  	
205  	                    except Exception as e:
206  	                        print(f"Error processing seed {i}: {str(e)}")
207  	                        traceback.print_exc()
208  	                        continue
209  	
210  	    except Exception as e:
211  	        print(f"Error in main: {str(e)}")
212  	        traceback.print_exc()
213  	        raise e
Ctrl+C received. Terminating processes...
Generating frontier for markets:   5%|██▍                                             | 1/20 [1:34:27<29:54:36, 5667.20s/it]
Traceback (most recent call last):
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 168, in <module>
    print(market_index)
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 168, in <module>
    print(market_index)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 112, in dispatch_line
    self.user_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/pdb.py", line 262, in user_line
    self.interaction(frame, None)
  File "/common/home/hg343/anaconda3/lib/python3.9/pdb.py", line 357, in interaction
    self._cmdloop()
  File "/common/home/hg343/anaconda3/lib/python3.9/pdb.py", line 322, in _cmdloop
    self.cmdloop()
  File "/common/home/hg343/anaconda3/lib/python3.9/cmd.py", line 126, in cmdloop
    line = input(self.prompt)
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 58, in signal_handler
    pool.terminate()
  File "/common/home/hg343/anaconda3/lib/python3.9/multiprocessing/pool.py", line 654, in terminate
    self._terminate()
  File "/common/home/hg343/anaconda3/lib/python3.9/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/common/home/hg343/anaconda3/lib/python3.9/multiprocessing/pool.py", line 692, in _terminate_pool
    cls._help_stuff_finish(inqueue, task_handler, len(pool))
  File "/common/home/hg343/anaconda3/lib/python3.9/multiprocessing/pool.py", line 672, in _help_stuff_finish
    inqueue._rlock.acquire()
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 60, in signal_handler
    sys.exit(1)
  File "/common/home/hg343/anaconda3/lib/python3.9/site-packages/wandb/sdk/lib/exit_hooks.py", line 36, in exit
    self._orig_exit(orig_code)  # type: ignore
SystemExit: 1
Ctrl+C received. Terminating processes...