Generating frontier for markets:   0%|                                                                | 0/20 [00:00<?, ?it/s]
Checking buy side options:   0%|                                                                      | 0/23 [00:00<?, ?it/s]
There are 25 buy orders and 25 sell orders
#####Generating combinatorial/book/STOCK_2_SEED_2_book_AAPL_MSFT.npy with size 50 and noise 0.015625#####
Starting async computation for iteration 0
Set parameter Username
Academic license - for non-commercial use only - expires 2025-11-08
RangeIndex(start=0, stop=25, step=1) {2, 15}
RangeIndex(start=0, stop=25, step=1) {4, 8, 9, 10, 15, 19, 20, 22}
23






Checking buy side options: 100%|█████████████████████████████████████████████████████████████| 23/23 [00:13<00:00,  1.59it/s]




Checking sell side options: 100%|████████████████████████████████████████████████████████████| 17/17 [00:10<00:00,  1.63it/s]







Checking buy side options: 100%|█████████████████████████████████████████████████████████████| 23/23 [00:14<00:00,  1.52it/s]




Checking sell side options:  88%|████████████████████████████████████████████████████▉       | 15/17 [00:09<00:01,  1.75it/s]
False
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor.py(535)<module>()

Checking sell side options: 100%|████████████████████████████████████████████████████████████| 17/17 [00:10<00:00,  1.58it/s]
  1  	import pdb
  2  	import pickle
  3  	import argparse
  4  	import pandas as pd
  5  	import numpy as np
  6  	import random
  7  	import math
  8  	import os.path
  9  	from combinatorial.gen_synthetic_combo_options import gen_synthetic_combo_options
 10  	from combinatorial.synthetic_combo_mip_match import synthetic_combo_match_mip
 11  	from gurobipy import *
 12  	import timeit
 13  	from copy import deepcopy
 14  	from tqdm import tqdm
 15  	# Run in a separate process with timeout
 16  	from multiprocessing import Process, Queue, Pool
 17  	import multiprocessing as mp
 18  	import queue
 19  	import traceback
 20  	from contextlib import contextmanager
 21  	import signal
 22  	import sys
 23  	from multiprocessing import Pool, TimeoutError
 24  	import itertools
 25  	import wandb
 26  	import os
 27  	
 28  	
 29  	# Add this function to parse command line arguments
 30  	def parse_arguments():
 31  	    parser = argparse.ArgumentParser(description='Process stock options.')
 32  	    parser.add_argument('--num_stocks', type=int, default=2, help='Number of stocks to process (default: 3)')
 33  	    parser.add_argument('--market_size', type=int, default=50, help='Number of orders in the market')
 34  	    parser.add_argument('--offset', type=bool, default=False, help='Whether to allow offset for liability in the optimization')
 35  	    parser.add_argument('--wandb_project', type=str, default='expediating_comb_financial_market_matching', help='Wandb project name')
 36  	    parser.add_argument('--num_orders', type=int, default=5000, help='number of orders in the orderbook')
 37  	    parser.add_argument('--noise', type=float, default=2**-6, help='noise level in the orderbook')
 38  	    return parser.parse_args()
 39  	
 40  	# Move the main execution code inside if __name__ == '__main__':
 41  	args = parse_arguments()
 42  	
 43  	
 44  	
 45  	# Set wandb API key programmatically
 46  	os.environ["WANDB_API_KEY"] = "d1cb0d609d7b64218fe82a45a54e57f47e2d26da"
 47  	
 48  	try:
 49  	    wandb.login()  # This will now use the API key we just set
 50  	except wandb.errors.AuthError:
 51  	    print("Could not authenticate with wandb. Invalid API key")
 52  	    sys.exit(1)
 53  	
 54  	def signal_handler(signum, frame):
 55  	    print("Ctrl+C received. Terminating processes...")
 56  	    if 'pool' in globals():
 57  	        pool.terminate()
 58  	        pool.join()
 59  	    sys.exit(1)
 60  	
 61  	# Register the signal handler
 62  	signal.signal(signal.SIGINT, signal_handler)
 63  	
 64  	def synthetic_combo_frontier_generation(original_opt_buy_book: pd.DataFrame, original_opt_sell_book: pd.DataFrame, s1='S1', s2='S2', opt_l = False, debug=0):
 65  	    '''
 66  	    opt_buy_book_holder: pandas dataframe contains bid orders; regardless of input; transformed to column order: ['option1', 'option2', 'C=Call, P=Put','Strike Price of the Option Times 1000', 'transaction_type','B/A_price']
 67  	    opt_sell_book_holder: pandas dataframe contains ask orders; ...
 68  	    s1: stock 1 name
 69  	    s2: stock 2 name
 70  	    opt_l: whether have offset or budget on liability in the optimization
 71  	    debug: whether to debug
 72  	    order book: contains coefficients up to len(stock_list); call/put; strike; buy/sell; price (bid/ask)
 73  	    '''
 74  	    #first check if is match and provide frontier if not:
 75  	    original_opt_buy_book = original_opt_buy_book[['option1', 'option2', 'C=Call, P=Put','Strike Price of the Option Times 1000', 'transaction_type','B/A_price']]
 76  	    original_opt_sell_book = original_opt_sell_book[['option1', 'option2', 'C=Call, P=Put','Strike Price of the Option Times 1000', 'transaction_type','B/A_price']]
 77  	    _, num_iter, profit , isMatch, matched_stock = synthetic_combo_match_mip(deepcopy(original_opt_buy_book), deepcopy(original_opt_sell_book), debug=0)
 78  	    buy_book_index = original_opt_buy_book.index
 79  	    sell_book_index = original_opt_sell_book.index
 80  	    if isMatch:
 81  	        #remove the matched
 82  	        #check no match exist after removal of matched.
 83  	        # if 'buy_book_index' in matched_stock and 'sell_book_index' in matched_stock:
 84  	        #     remove_buy_book = matched_stock['buy_book_index']
 85  	        #     remove_sell_book = matched_stock['sell_book_index']
 86  	        #     filtered_index = lambda filter_index, all_index: [idx for idx in all_index if idx not in filter_index]
 87  	        #     opt_buy_book_filtered_index =  filtered_index(remove_buy_book, buy_book_index)
 88  	        #     opt_sell_book_filtered_index = filtered_index(remove_sell_book, sell_book_index)
 89  	        #     opt_buy_book_holder = deepcopy(original_opt_buy_book.loc[opt_buy_book_filtered_index])
 90  	        #     opt_sell_book_holder = deepcopy(original_opt_sell_book.loc[opt_sell_book_filtered_index])
 91  	        #     _, num_iter, profit , isMatch_new, matched_stock= synthetic_combo_match_mip(opt_buy_book_holder, opt_sell_book_holder, debug=0)
 92  	        assert 'buy_book_index' in matched_stock and 'sell_book_index' in matched_stock
 93  	        if 'buy_book_index' in matched_stock and 'sell_book_index' in matched_stock:
 94  	            remove_buy_book = set(matched_stock['buy_book_index'])  # Convert to set for faster lookup
 95  	            remove_sell_book = set(matched_stock['sell_book_index'])
 96  	
 97  	            # Use pandas index operations instead
 98  	            opt_buy_book_filtered_index = buy_book_index.difference(remove_buy_book)
 99  	            opt_sell_book_filtered_index = sell_book_index.difference(remove_sell_book)
100  	            print(buy_book_index, remove_buy_book)
101  	            print(sell_book_index, remove_sell_book)
102  	            opt_buy_book_holder = deepcopy(original_opt_buy_book.loc[opt_buy_book_filtered_index])
103  	            opt_sell_book_holder = deepcopy(original_opt_sell_book.loc[opt_sell_book_filtered_index])
104  	            print(len(opt_buy_book_holder))
105  	            print(len(opt_sell_book_holder))
106  	            if len(opt_buy_book_holder) == 0 or len(opt_sell_book_holder) == 0:
107  	                return None
108  	            _, num_iter, profit , isMatch_new, matched_stock= synthetic_combo_match_mip(opt_buy_book_holder.copy(), opt_sell_book_holder.copy(), debug=0)
109  	
110  	        if isMatch_new:
111  	            return None
112  	
113  	    else:
114  	        opt_buy_book_holder = deepcopy(original_opt_buy_book)
115  	        opt_sell_book_holder = deepcopy(original_opt_sell_book)
116  	
117  	    num_buy_holder, num_sell_holder, num_stock = len(opt_buy_book_holder), len(opt_sell_book_holder), len(opt_buy_book_holder.columns)-4
118  	    # coeff up to len(stock_list); call/put; strike; buy/sell; price (bid/ask)
119  	    opt_sell_book_frontier_labels = np.zeros(len(opt_sell_book_holder))
120  	    opt_buy_book_frontier_labels = np.zeros(len(opt_buy_book_holder))
121  	
122  	    # find frontier bids:
123  	    for option_index in tqdm(range(len(opt_buy_book_holder)), desc='Checking buy side options'):
124  	        sub_obj = 1
125  	        #add N+1 option of the buy option to seller side and set ask price = 0
126  	        opt_buy_book = deepcopy(opt_buy_book_holder).to_numpy()
127  	        opt_sell_book = deepcopy(opt_sell_book_holder).to_numpy()
128  	        # what is inside of buy book is actually ask orders
129  	        bid = opt_buy_book[option_index][5]
130  	        copied_opt_sell = deepcopy(opt_buy_book[option_index])
131  	        #lets assume we are only handling two option case
132  	        copied_opt_sell[5] = 0
133  	        opt_sell_book = np.concatenate([opt_sell_book, np.expand_dims(copied_opt_sell, axis= 0 )],axis=0)
134  	        num_buy = len(opt_buy_book)
135  	        num_sell = len(opt_sell_book)
136  	        # add initial constraints
137  	        f_constraints = []
138  	        f_constraints.append(np.maximum(opt_buy_book[:, -4]*(np.concatenate(np.matmul(opt_buy_book[:, :-4], np.zeros((num_stock, 1))))-opt_buy_book[:, -3]), 0))
139  	        f_constraints.append(np.maximum(opt_buy_book[:, -4]*(np.concatenate(np.matmul(opt_buy_book[:, :-4], sys.maxsize*np.ones((num_stock, 1))))-opt_buy_book[:, -3]), 0))
140  	        g_constraints = []
141  	        g_constraints.append(np.maximum(opt_sell_book[:, -4]*(np.concatenate(np.matmul(opt_sell_book[:, :-4], np.zeros((num_stock, 1))))-opt_sell_book[:, -3]), 0))
142  	        g_constraints.append(np.maximum(opt_sell_book[:, -4]*(np.concatenate(np.matmul(opt_sell_book[:, :-4], sys.maxsize*np.ones((num_stock, 1))))-opt_sell_book[:, -3]), 0))
143  	        try:
144  	            # prime problem
145  	            model = Model("match")
146  	            model.setParam('OutputFlag', False)
147  	            gamma = model.addVars(1, num_buy, ub=1) #sell to bid orders
148  	            delta = model.addVars(1, num_sell, ub=1) #buy from ask orders
149  	            if opt_l:
150  	                L = model.addVars(1, 1, lb=-GRB.INFINITY, ub=GRB.INFINITY)
151  	
152  	            # constraint of 0
153  	            buy_sum = sum(delta[0,i]*g_constraints[0][i] for i in range(num_sell))
154  	            sell_sum = sum(gamma[0,i]*f_constraints[0][i] for i in range(num_buy))
155  	            if opt_l:
156  	                model.addLConstr(sell_sum-buy_sum-L[0,0], GRB.LESS_EQUAL, 0)
157  	            else:
158  	                model.addLConstr(sell_sum-buy_sum, GRB.LESS_EQUAL, 0)
159  	            expense = sum(delta[0,i]*opt_sell_book[i, -1] for i in range(num_sell))
160  	            gain = sum(gamma[0,i]*opt_buy_book[i, -1] for i in range(num_buy))
161  	            if opt_l:
162  	                model.setObjective(gain-expense-L[0,0], GRB.MAXIMIZE)
163  	            else:
164  	                model.setObjective(gain-expense, GRB.MAXIMIZE)
165  	
166  	            # sub problem
167  	            sub_model = Model("sub_match")
168  	            sub_model.setParam('OutputFlag', False)
169  	            M = 1000000
170  	            s = sub_model.addVars(1, num_stock)
171  	            f = sub_model.addVars(1, num_buy, lb=-GRB.INFINITY)
172  	            g = sub_model.addVars(1, num_sell)
173  	            I = sub_model.addVars(1, num_buy, vtype=GRB.BINARY)
174  	            for i in range(num_sell):
175  	                sub_model.addLConstr(opt_sell_book[i, -4]*(sum(opt_sell_book[i, j]*s[0,j] for j in range(num_stock))-opt_sell_book[i, -3])-g[0, i], GRB.LESS_EQUAL, 0)
176  	            for i in range(num_buy):
177  	                sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])+M*(1-I[0, i])-f[0, i], GRB.GREATER_EQUAL, 0)
178  	                sub_model.addLConstr(M*I[0, i]-f[0, i], GRB.GREATER_EQUAL, 0)
179  	                sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])+M*(1-I[0, i]), GRB.GREATER_EQUAL, 0)
180  	                sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])-M*I[0, i], GRB.LESS_EQUAL, 0)
181  	
182  	            it = 0
183  	            start = timeit.default_timer()
184  	            while sub_obj > 0.0005:
185  	                # add newly generated constraint
186  	                buy_sum_new = sum(delta[0,i]*g_constraints[-1][i] for i in range(num_sell))
187  	                sell_sum_new = sum(gamma[0,i]*f_constraints[-1][i] for i in range(num_buy))
188  	                if opt_l:
189  	                    model.addLConstr(sell_sum_new-buy_sum_new-L[0,0], GRB.LESS_EQUAL, 0)
190  	                else:
191  	                    model.addLConstr(sell_sum_new-buy_sum_new, GRB.LESS_EQUAL, 0)
192  	                model.optimize()
193  	                # for v in model.getVars():
194  	                # 	print('%s %g' % (v.varName, v.x))
195  	                # save decision variables from prime problem
196  	                gamma_val = np.array([max(gamma[0, i].x, 0) for i in range(num_buy)])
197  	                delta_val = np.array([max(delta[0, i].x, 0) for i in range(num_sell)])
198  	                if opt_l:
199  	                    L_val = L[0,0].x
200  	                if debug == 2:
201  	                    print(gamma_val)
202  	                    print(delta_val)
203  	                    print(L_val)
204  	
205  	                # define sub obj
206  	                if opt_l:
207  	                    sub_model.setObjective(sum(gamma_val[i]*f[0, i] for i in range(num_buy))-sum(delta_val[i]*g[0, i] for i in range(num_sell))-L_val, GRB.MAXIMIZE)
208  	                else:
209  	                    sub_model.setObjective(sum(gamma_val[i]*f[0, i] for i in range(num_buy))-sum(delta_val[i]*g[0, i] for i in range(num_sell)), GRB.MAXIMIZE)
210  	                sub_model.optimize()
211  	                # for v in sub_model.getVars():
212  	                # 	print('%s %g' % (v.varName, v.x))
213  	                if debug > 0:
214  	                    if it % 100 == 0:
215  	                        print([s[0, i].x for i in range(num_stock)])
216  	                        print('{}: objective is {} > 0'.format(it, sub_model.objVal))
217  	                    if debug == 2:
218  	                        for i in range(num_buy):
219  	                            print('I:', I[0, i].x)
220  	                            print('f:', f[0, i].x)
221  	                        for i in range(num_sell):
222  	                            print('g:', g[0, i].x)
223  	                # save decision variables from sub problem
224  	                f_constraints.append(np.array([f[0, i].x for i in range(num_buy)]))
225  	                g_constraints.append(np.array([g[0, i].x for i in range(num_sell)]))
226  	                sub_obj = sub_model.objVal
227  	                it += 1
228  	
229  	            stop = timeit.default_timer()
230  	            time = stop - start
231  	            # print matching result
232  	            if debug == 1:
233  	                revenue = 0
234  	                for i in range(num_buy):
235  	                    if gamma[0, i].x > 0:
236  	                        revenue += gamma[0,i].x * opt_buy_book[i, -1]
237  	                        print('Sell {} to {}({}{}+{}{},{}) at bid price {}'.format(round(gamma[0,i].x, 4), 'C' if opt_buy_book[i, -4]==1 else 'P', \
238  	                                                                                opt_buy_book[i, 0], s1, opt_buy_book[i, 1], s2, opt_buy_book[i, -3], opt_buy_book[i, -1]))
239  	                for i in range(num_sell):
240  	                    if delta[0, i].x > 0:
241  	                        revenue -= delta[0,i].x * opt_sell_book[i, -1]
242  	                        print('Buy {} from {}({}{}+{}{},{}) at ask price {}'.format(round(delta[0,i].x, 4), 'C' if opt_sell_book[i, -4]==1 else 'P', \
243  	                                                                                    opt_sell_book[i, 0], s1, opt_sell_book[i, 1], s2, opt_sell_book[i, -3], opt_sell_book[i, -1]))
244  	                print('Revenue at T0 is {}; L is {}; Objective is {} = {}'.format(round(revenue,2), round(L[0,0].x, 2), round(revenue-L[0,0].x, 2), round(model.objVal, 2)))
245  	        except GurobiError as e:
246  	            print('Error code ' + str(e.errno) + ": " + str(e))
247  	        except AttributeError:
248  	            print('Encountered an attribute error')
249  	        if model.objVal <= bid:
250  	            #add it to frontiers
251  	            opt_buy_book_frontier_labels[option_index] = 1
252  	        else:
253  	            assert opt_buy_book_frontier_labels[option_index] == 0
254  	
255  	    for option_index in tqdm(range(len(opt_sell_book_holder)), desc='Checking sell side options'):
256  	        sub_obj = 1
257  	        #add sell option to buy side of the market and set b_(M+1) price  = 10^6
258  	        opt_sell_book = deepcopy(opt_sell_book_holder).to_numpy()
259  	        opt_buy_book = deepcopy(opt_buy_book_holder).to_numpy()
260  	        ask = opt_sell_book[option_index][5]
261  	        copied_opt_buy = deepcopy(opt_sell_book[option_index])
262  	        #lets assume we are only handling two option case
263  	        copied_opt_buy[5] = 1e6
264  	        opt_buy_book = np.concatenate([opt_buy_book, np.expand_dims(copied_opt_buy, axis = 0)] ,axis=0)
265  	        num_buy = len(opt_buy_book)
266  	        num_sell = len(opt_sell_book)
267  	        # add initial constraints
268  	        f_constraints = []
269  	        f_constraints.append(np.maximum(opt_buy_book[:, -4]*(np.concatenate(np.matmul(opt_buy_book[:, :-4], np.zeros((num_stock, 1))))-opt_buy_book[:, -3]), 0))
270  	        f_constraints.append(np.maximum(opt_buy_book[:, -4]*(np.concatenate(np.matmul(opt_buy_book[:, :-4], sys.maxsize*np.ones((num_stock, 1))))-opt_buy_book[:, -3]), 0))
271  	        g_constraints = []
272  	        g_constraints.append(np.maximum(opt_sell_book[:, -4]*(np.concatenate(np.matmul(opt_sell_book[:, :-4], np.zeros((num_stock, 1))))-opt_sell_book[:, -3]), 0))
273  	        g_constraints.append(np.maximum(opt_sell_book[:, -4]*(np.concatenate(np.matmul(opt_sell_book[:, :-4], sys.maxsize*np.ones((num_stock, 1))))-opt_sell_book[:, -3]), 0))
274  	        try:
275  	            # prime problem
276  	            model = Model("match")
277  	            model.setParam('OutputFlag', False)
278  	            gamma = model.addVars(1, num_buy, ub=1) #sell to bid orders
279  	            delta = model.addVars(1, num_sell, ub=1) #buy from ask orders
280  	            if opt_l:
281  	                L = model.addVars(1, 1, lb=-GRB.INFINITY, ub=GRB.INFINITY)
282  	            # constraint of 0
283  	            buy_sum = sum(delta[0,i]*g_constraints[0][i] for i in range(num_sell))
284  	            sell_sum = sum(gamma[0,i]*f_constraints[0][i] for i in range(num_buy))
285  	            if opt_l:
286  	                model.addLConstr(sell_sum-buy_sum-L[0,0], GRB.LESS_EQUAL, 0)
287  	            else:
288  	                model.addLConstr(sell_sum-buy_sum, GRB.LESS_EQUAL, 0)
289  	            # define obj
290  	            expense = sum(delta[0,i]*opt_sell_book[i, -1] for i in range(num_sell))
291  	            gain = sum(gamma[0,i]*opt_buy_book[i, -1] for i in range(num_buy))
292  	            if opt_l:
293  	                model.setObjective(gain-expense-L[0,0], GRB.MAXIMIZE)
294  	            else:
295  	                model.setObjective(gain-expense, GRB.MAXIMIZE)
296  	
297  	            # sub problem
298  	            sub_model = Model("sub_match")
299  	            sub_model.setParam('OutputFlag', False)
300  	            M = 1000000
301  	            s = sub_model.addVars(1, num_stock)
302  	            f = sub_model.addVars(1, num_buy, lb=-GRB.INFINITY)
303  	            g = sub_model.addVars(1, num_sell)
304  	            I = sub_model.addVars(1, num_buy, vtype=GRB.BINARY)
305  	            for i in range(num_sell):
306  	                sub_model.addLConstr(opt_sell_book[i, -4]*(sum(opt_sell_book[i, j]*s[0,j] for j in range(num_stock))-opt_sell_book[i, -3])-g[0, i], GRB.LESS_EQUAL, 0)
307  	            for i in range(num_buy):
308  	                sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])+M*(1-I[0, i])-f[0, i], GRB.GREATER_EQUAL, 0)
309  	                sub_model.addLConstr(M*I[0, i]-f[0, i], GRB.GREATER_EQUAL, 0)
310  	                sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])+M*(1-I[0, i]), GRB.GREATER_EQUAL, 0)
311  	                sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])-M*I[0, i], GRB.LESS_EQUAL, 0)
312  	
313  	            it = 0
314  	            start = timeit.default_timer()
315  	            while sub_obj > 0.0005:
316  	                # add newly generated constraint
317  	                buy_sum_new = sum(delta[0,i]*g_constraints[-1][i] for i in range(num_sell))
318  	                sell_sum_new = sum(gamma[0,i]*f_constraints[-1][i] for i in range(num_buy))
319  	                if opt_l:
320  	                    model.addLConstr(sell_sum_new-buy_sum_new-L[0,0], GRB.LESS_EQUAL, 0)
321  	                else:
322  	                    model.addLConstr(sell_sum_new-buy_sum_new, GRB.LESS_EQUAL, 0)
323  	                model.optimize()
324  	                # for v in model.getVars():
325  	                # 	print('%s %g' % (v.varName, v.x))
326  	                # save decision variables from prime problem
327  	                gamma_val = np.array([max(gamma[0, i].x, 0) for i in range(num_buy)])
328  	                delta_val = np.array([max(delta[0, i].x, 0) for i in range(num_sell)])
329  	                if opt_l:
330  	                    L_val = L[0,0].x
331  	                if debug == 2:
332  	                    print(gamma_val)
333  	                    print(delta_val)
334  	                    print(L_val)
335  	
336  	                # define sub obj
337  	                if opt_l:
338  	                    sub_model.setObjective(sum(gamma_val[i]*f[0, i] for i in range(num_buy))-sum(delta_val[i]*g[0, i] for i in range(num_sell))-L_val, GRB.MAXIMIZE)
339  	                else:
340  	                    sub_model.setObjective(sum(gamma_val[i]*f[0, i] for i in range(num_buy))-sum(delta_val[i]*g[0, i] for i in range(num_sell)), GRB.MAXIMIZE)
341  	                sub_model.optimize()
342  	                # for v in sub_model.getVars():
343  	                # 	print('%s %g' % (v.varName, v.x))
344  	                if debug > 0:
345  	                    if it % 100 == 0:
346  	                        print([s[0, i].x for i in range(num_stock)])
347  	                        print('{}: objective is {} > 0'.format(it, sub_model.objVal))
348  	                    if debug == 2:
349  	                        for i in range(num_buy):
350  	                            print('I:', I[0, i].x)
351  	                            print('f:', f[0, i].x)
352  	                        for i in range(num_sell):
353  	                            print('g:', g[0, i].x)
354  	                # save decision variables from sub problem
355  	                f_constraints.append(np.array([f[0, i].x for i in range(num_buy)]))
356  	                g_constraints.append(np.array([g[0, i].x for i in range(num_sell)]))
357  	                sub_obj = sub_model.objVal
358  	                it += 1
359  	
360  	            stop = timeit.default_timer()
361  	            time = stop - start
362  	            # print matching result
363  	            if debug == 1:
364  	                revenue = 0
365  	                for i in range(num_buy):
366  	                    if gamma[0, i].x > 0:
367  	                        revenue += gamma[0,i].x * opt_buy_book[i, -1]
368  	                        print('Sell {} to {}({}{}+{}{},{}) at bid price {}'.format(round(gamma[0,i].x, 4), 'C' if opt_buy_book[i, -4]==1 else 'P', \
369  	                                                                                opt_buy_book[i, 0], s1, opt_buy_book[i, 1], s2, opt_buy_book[i, -3], opt_buy_book[i, -1]))
370  	                for i in range(num_sell):
371  	                    if delta[0, i].x > 0:
372  	                        revenue -= delta[0,i].x * opt_sell_book[i, -1]
373  	                        print('Buy {} from {}({}{}+{}{},{}) at ask price {}'.format(round(delta[0,i].x, 4), 'C' if opt_sell_book[i, -4]==1 else 'P', \
374  	                                                                                    opt_sell_book[i, 0], s1, opt_sell_book[i, 1], s2, opt_sell_book[i, -3], opt_sell_book[i, -1]))
375  	                print('Revenue at T0 is {}; L is {}; Objective is {} = {}'.format(round(revenue,2), round(L[0,0].x, 2), round(revenue-L[0,0].x, 2), round(model.objVal, 2)))
376  	        except GurobiError as e:
377  	            print('Error code ' + str(e.errno) + ": " + str(e))
378  	        except AttributeError:
379  	            print('Encountered an attribute error')
380  	        if 1e6-model.objVal >= ask:
381  	
382  	            #get the index of all the non-zero in gamma and delta
383  	            # gamma_index = np.where(gamma[0,:].x > 0)[0]
384  	            # delta_index = np.where(delta[0,:].x > 0)[0]
385  	            # print('current index: {}'.format(option_index))
386  	            # print('sold to {} and bought from {}'.format(gamma_index, delta_index))
387  	            opt_sell_book_frontier_labels[option_index] = 1
388  	        else:
389  	            assert opt_sell_book_frontier_labels[option_index] == 0
390  	
391  	    # Fix the DataFrame creation by adding the new column name
392  	    columns = list(opt_buy_book_holder.columns) + ['belongs_to_frontier']
393  	    frontier_buy_book = pd.DataFrame(
394  	        np.concatenate([opt_buy_book_holder, np.expand_dims(opt_buy_book_frontier_labels, axis=1)], axis=1),
395  	        index=opt_buy_book_holder.index,
396  	        columns=columns  # Use updated columns list
397  	    )
398  	
399  	    frontier_sell_book = pd.DataFrame(
400  	        np.concatenate([opt_sell_book_holder, np.expand_dims(opt_sell_book_frontier_labels, axis=1)], axis=1),
401  	        index=opt_sell_book_holder.index,
402  	        columns=columns  # Use updated columns list
403  	    )
404  	
405  	    return pd.concat([frontier_buy_book, frontier_sell_book])
406  	
407  	
408  	
409  	
410  	
411  	def add_noise_orderbook(opt_book, NOISE=0.01):
412  	    SEED = 1
413  	    random.seed(SEED)
414  	    # coeff up to len(stock_list); call/put; strike; buy/sell; price (bid/ask)
415  	    opt_buy_book, opt_sell_book = opt_book[opt_book[:, -2]==1], opt_book[opt_book[:, -2]==0]
416  	    num_buy, num_sell = len(opt_buy_book), len(opt_sell_book)
417  	    # add noise
418  	    buy_noise = [random.random()*NOISE+1 for i in range(num_buy)]
419  	    opt_buy_book[:, -1] = np.round(buy_noise * opt_buy_book[:, -1], 2)
420  	    sell_noise = [1-random.random()*NOISE for i in range(num_sell)]
421  	    opt_sell_book[:, -1] = np.round(sell_noise * opt_sell_book[:, -1], 2)
422  	    print('There are {} buy orders and {} sell orders'.format(num_buy, num_sell))
423  	    return opt_buy_book, opt_sell_book
424  	
425  	
426  	def run_with_timeout(opt_buy_book, opt_sell_book, opt_l = False):
427  	    try:
428  	        #
429  	        result = synthetic_combo_frontier_generation(opt_buy_book, opt_sell_book, opt_l = opt_l, debug=0)
430  	        return result
431  	    except GurobiError as e:
432  	        print(f"Gurobi Error in process: {str(e)}")
433  	        return None
434  	    except Exception as e:
435  	        print(f"Process error: {str(e)}")
436  	        traceback.print_exc()
437  	        return None
438  	@contextmanager
439  	def pool_context(*args, **kwargs):
440  	    pool = mp.Pool(*args, **kwargs)
441  	    try:
442  	        yield pool
443  	    finally:
444  	        pool.terminate()
445  	        pool.join()
446  	
447  	# Parameter lists
448  	# NUM_STOCK_LIST = [2] #, 4, 8, 12, 16, 20]  # 12, 16, 20
449  	# BOOK_SIZE_LIST = [50] #,150, 200, 250, 300, 350, 400]
450  	# NOISE_LIST = [2**-6]#[2**-7, 2**-6, 2**-5, 2**-4, 2**-3]
451  	
452  	
453  	
454  	if __name__ == '__main__':
455  	    NUM_STOCK = args.num_stocks
456  	    MARKET_SIZE = args.market_size
457  	    NOISE = args.noise
458  	    BOOK_SIZE = args.market_size
459  	    NOISE = args.noise
460  	# Create a new pool for each iteration
461  	    tasks = {}
462  	    # directory_path = f'/common/home/hg343/Research/accelerate_combo_option/data/combo_{NUM_STOCK}_frontier_no_offset'
463  	    directory_path = f'/common/home/hg343/Research/accelerate_combo_option/data/combo_2_test'
464  	    with pool_context(processes=20) as pool:
465  	        try:
466  	            with wandb.init(
467  	                project=args.wandb_project,
468  	                name = f"combo_frontier_num_stock_{NUM_STOCK}_noise_{NOISE}_market_size_{MARKET_SIZE}",
469  	            ) as run:
470  	                #turn off random selection for now
471  	                selection = ['AAPL', 'AXP', 'BA', 'DIS', 'GS', 'HD', 'IBM', 'JNJ', 'JPM', 'KO', 'MCD', 'MMM', 'MSFT', 'NKE', 'PG', 'RTX', 'VZ', 'WBA', 'WMT', 'XOM']
472  	                # combinations = list(itertools.combinations(selection,NUM_STOCK))
473  	                #combination not seen ['MSFT', 'AXP'] , ['MSFT', 'GS'], ['JPM', 'IBM'], ['MSFT', 'BA'], ['NKE', 'IBM']]
474  	                # combinations = [['MSFT', 'GS'] ]
475  	                stock_list = ['AAPL','MSFT']
476  	                combinations = [['AAPL','MSFT']]
477  	                random_select_combination = list(random.choice(combinations))
478  	                combinations_string = '_'.join(random_select_combination)
479  	                for i in range(2,14):
480  	                    filename = f'combinatorial/book/STOCK_2_SEED_{i}_book_{combinations_string}.npy'
481  	                    if os.path.isfile(filename):
482  	                        opt_book = np.load(filename)
483  	                    else:
484  	                        print('File not found')
485  	                        opt_book, stock_list = gen_synthetic_combo_options(NUM_ST=NUM_STOCK, NUM_ORDER=args.num_orders, combinations= random_select_combination,SEED=i)
486  	                        np.save(filename, opt_book)
487  	                    num_books = len(opt_book)//50
488  	                    # Create artifact once before the loop
489  	                    artifact = wandb.Artifact(
490  	                        name=f"combo_frontier_{'_'.join(stock_list)}_size_{BOOK_SIZE}_noise_{NOISE}",
491  	                        type="dataset",
492  	                        description="Collection of frontier options training data for different markets",
493  	                        metadata={
494  	                            'num_stock': NUM_STOCK,
495  	                            'stock_name': '_'.join(stock_list),
496  	                            'noise': NOISE,
497  	                            'book_size': BOOK_SIZE,
498  	                            'total_markets': num_books  # Add total number of markets
499  	                        }
500  	                    )
501  	                    for market_index in tqdm(range(0,num_books), desc=f'Generating frontier for markets'):
502  	                        stock_name = '_'.join(stock_list)
503  	                        opt_book_1 = opt_book[market_index*MARKET_SIZE:(market_index+1)*MARKET_SIZE]
504  	                        opt_buy_book, opt_sell_book = add_noise_orderbook(opt_book_1, NOISE)
505  	                        print('#####Generating {} with size {} and noise {}#####'.format(filename, BOOK_SIZE, NOISE))
506  	                                # Add debug print before async
507  	                        print(f"Starting async computation for iteration {market_index}")
508  	                        filename = f'corrected_testing_combo_frontier_market_index_{market_index}_book_size_{BOOK_SIZE}_{stock_name}_NOISE_{NOISE}'
509  	                        column_names = ['option1', 'option2', 'C=Call, P=Put','Strike Price of the Option Times 1000', 'transaction_type','B/A_price']
510  	                        opt_buy_book = pd.DataFrame(opt_buy_book, columns = column_names)
511  	                        opt_sell_book = pd.DataFrame(opt_sell_book, columns = column_names)
512  	                        # testing whether the generated frontiers themselves matches
513  	                        frontier_option_label_attempt_1 = synthetic_combo_frontier_generation(opt_buy_book, opt_sell_book, opt_l = args.offset, debug=0)
514  	                        frontier_option_label_attempt_1_copy = deepcopy(frontier_option_label_attempt_1)
515  	                        frontier_option_label_attempt_1.columns = [*column_names, 'belongs_to_frontier']
516  	                        opt_buy_book_new = frontier_option_label_attempt_1[frontier_option_label_attempt_1.loc[:, 'transaction_type']==1].iloc[:,:-1]
517  	                        opt_sell_book_new = frontier_option_label_attempt_1[frontier_option_label_attempt_1.loc[:, 'transaction_type']==0].iloc[:,:-1]
518  	                        frontier_option_label_attempt_2 = synthetic_combo_frontier_generation(opt_buy_book_new, opt_sell_book_new, opt_l = False, debug=0)
519  	                        assert frontier_option_label_attempt_2.equals(frontier_option_label_attempt_1_copy)
520  	                        frontier_option_label = deepcopy(frontier_option_label_attempt_1)
521  	                        # async_result = pool.apply_async(run_with_timeout, (opt_buy_book, opt_sell_book, args.offset))
522  	                        # frontier_option_label = async_result.get(timeout=600)
523  	                        df = pd.DataFrame(frontier_option_label, columns=['option1', 'option2','C=Call, P=Put',
524  	                        'Strike Price of the Option Times 1000',
525  	                        'transaction_type', 'B/A_price',
526  	                        'belongs_to_frontier'])
527  	
528  	                        buy_book = df[df['transaction_type'] == 1]
529  	                        sell_book = df[df['transaction_type'] == 0]
530  	
531  	                        print(synthetic_combo_match_mip(buy_book, sell_book, debug=0)[3])
532  	                        with open('here.pkl', 'wb') as f:
533  	                                    pickle.dump(frontier_option_label, f)
534  	                        breakpoint()
535  ->	                        tasks.update({'filename': [market_index,async_result]})
536  	
537  	                    for market_index, solving_result in tasks.values():
538  	                        market_index, async_result = solving_result
539  	                        try:
540  	                            print(f"Waiting for result in iteration {market_index}")
541  	                            frontier_option_label = async_result.get(timeout=600)
542  	                            print(f"Result type for iteration {market_index}: {type(frontier_option_label)}")
543  	                            if frontier_option_label is not None:
544  	                                print(f"Successfully completed iteration {market_index}")
545  	                                if not os.path.exists(directory_path):
546  	                                    os.makedirs(directory_path)
547  	
548  	                                stock_name = '_'.join(stock_list)
549  	                                save_path = os.path.join(directory_path, filename+'.pkl')
550  	
551  	                                print(f"Attempting to save to: {save_path}")
552  	                                metadata = {
553  	                                    'num_stock': NUM_STOCK,
554  	                                    'stock_name': stock_name,
555  	                                    'noise': NOISE,
556  	                                    'book_size': BOOK_SIZE,
557  	                                    'market_index': market_index
558  	                                }
559  	
560  	                                with open(save_path, 'wb') as f:
561  	                                    pickle.dump(frontier_option_label, f)
562  	                                breakpoint()
563  	                                # Log metadata for this specific market
564  	                                wandb.log({
565  	                                    f'market_{market_index}/metadata': metadata
566  	                                })
567  	
568  	                                # Add this market's file to the artifact
569  	                                artifact.add_file(save_path, name=f'markets/{filename}.pkl')
570  	                                print(f"Successfully saved iteration {market_index}")
571  	                            else:
572  	                                print(f"Iteration {market_index} returned None")
573  	
574  	                        except TimeoutError:
575  	                            print(f"Iteration {market_index} timed out after 20 seconds")
576  	                            # Pool will be automatically cleaned up when the context exits
577  	                            continue
578  	
579  	                # After the loop is complete, log the artifact once with all files
580  	                run.log_artifact(artifact)
581  	
582  	        except Exception as e:
583  	            print(f"Error in main: {str(e)}")
584  	            traceback.print_exc()

Generating frontier for markets:   0%|                                                                | 0/20 [03:34<?, ?it/s]
Traceback (most recent call last):
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor.py", line 535, in <module>
    tasks.update({'filename': [market_index,async_result]})
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor.py", line 535, in <module>
    tasks.update({'filename': [market_index,async_result]})
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit