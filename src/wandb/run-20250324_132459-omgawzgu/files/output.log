
Generating frontier for markets:   0%|                                                                      | 0/20 [00:00<?, ?it/s]
There are 25 buy orders and 25 sell orders
#####Generating combinatorial/book/STOCK_2_SEED_2_book_AAPL_MSFT.npy with size 50 and noise 0.015625#####
Starting async computation for iteration 0
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(158)<module>()
-> market = Market(pd.concat([opt_buy_book_df, opt_sell_book_df], ignore_index=False),mechanism_solver=mechanism_solver_combo)
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py(159)<module>()
-> is_match, profit = market.check_match()
Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23, 24],
           dtype='int64') Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23, 24],
           dtype='int64')
> /common/home/hg343/Research/accelerate_combo_option/src/mechanism_solver.py(187)mechanism_solver_combo()
-> assert len(set(buy_book_index) & set(sell_book_index)) == 0, "buy and sell book index should not have any shared index"
182  	    buy_orders, sell_orders = orders.loc[orders['transaction_type'] == 1], orders.loc[orders['transaction_type'] == 0]
183  	    buy_book_index = buy_orders.index
184  	    sell_book_index = sell_orders.index
185  	    print(buy_book_index, sell_book_index)
186  	    breakpoint()
187  ->	    assert len(set(buy_book_index) & set(sell_book_index)) == 0, "buy and sell book index should not have any shared index"
188  	    # Extract liquidity values before converting to numpy arrays
189  	    buy_liquidity = None
190  	    sell_liquidity = None
191  	    if 'liquidity' in buy_orders.columns:
192  	        buy_liquidity = buy_orders['liquidity'].values
    option1  option2  C=Call, P=Put  Strike Price of the Option Times 1000  transaction_type  B/A_price  liquidity
0      -3.0      5.0           -1.0                                  150.0               1.0      68.04          1
1       1.0      3.0            1.0                                  411.0               1.0      63.33          1
2       5.0     -8.0           -1.0                                  372.0               1.0     460.67          1
3       2.0     -1.0           -1.0                                  238.0               1.0      36.19          1
4      -2.0      9.0            1.0                                  496.5               1.0     156.18          1
5       1.0      7.0            1.0                                  715.0               1.0     186.12          1
6       2.0     -1.0           -1.0                                  221.0               1.0      19.82          1
7       6.0      5.0            1.0                                 1275.0               1.0     182.73          1
8       3.0      1.0            1.0                                  461.0               1.0     107.05          1
9       1.0      1.0            1.0                                  263.0               1.0       0.52          1
10      4.0      1.0           -1.0                                  740.5               1.0      22.92          1
11      3.0      2.0            1.0                                  569.0               1.0     106.16          1
12      3.0      1.0           -1.0                                  622.5               1.0      53.02          1
13      2.0     -1.0           -1.0                                  190.5               1.0       2.35          1
14      1.0     -2.0           -1.0                                    6.0               1.0      65.73          1
15      7.0      6.0            1.0                                 1348.0               1.0     371.95          1
16      2.0      1.0           -1.0                                  347.0               1.0       0.02          1
17      7.0      5.0           -1.0                                 1842.5               1.0     226.09          1
18      1.0      1.0           -1.0                                  319.5               1.0      57.90          1
19     -2.0      7.0            1.0                                  269.0               1.0     169.38          1
20     -5.0      7.0           -1.0                                   20.5               1.0      28.41          1
21      1.0      6.0           -1.0                                  878.0               1.0      73.64          1
22      4.0      9.0            1.0                                 1420.0               1.0     156.52          1
23      5.0     -3.0            1.0                                  353.0               1.0      90.72          1
24      8.0      5.0           -1.0                                 1597.0               1.0       0.30          1
    option1  option2  C=Call, P=Put  Strike Price of the Option Times 1000  transaction_type  B/A_price  liquidity
0       2.0     -3.0           -1.0                                   38.5               0.0      53.73          1
1       3.0      2.0           -1.0                                  821.5               0.0     149.36          1
2       8.0     -7.0            1.0                                  612.5               0.0      11.82          1
3       1.0     -1.0            1.0                                   83.5               0.0       1.03          1
4       1.0      1.0           -1.0                                  217.0               0.0       0.20          1
5       2.0     -3.0           -1.0                                    4.0               0.0      26.17          1
6       8.0     -5.0            1.0                                  530.0               0.0     174.67          1
7       3.0      8.0           -1.0                                 1484.0               0.0     176.88          1
8      -1.0      8.0            1.0                                  356.5               0.0     340.83          1
9       2.0      1.0           -1.0                                  337.0               0.0       0.21          1
10     -1.0      7.0            1.0                                  494.0               0.0     101.33          1
11     -4.0      7.0            1.0                                  143.0               0.0      30.24          1
12      1.0      1.0           -1.0                                  180.5               0.0       0.03          1
13      6.0      1.0           -1.0                                  976.5               0.0      10.59          1
14      5.0     -1.0            1.0                                  726.5               0.0       4.05          1
15      1.0      4.0            1.0                                  454.5               0.0     124.20          1
16      2.0      1.0           -1.0                                  371.5               0.0       1.24          1
17      6.0      5.0            1.0                                 1520.0               0.0      13.98          1
18      2.0      1.0           -1.0                                  438.0               0.0      26.91          1
19      8.0     -1.0            1.0                                  825.5               0.0     296.32          1
20      2.0     -1.0            1.0                                  274.5               0.0       0.15          1
21      4.0      7.0            1.0                                 1308.0               0.0      69.58          1
22      3.0      1.0           -1.0                                  678.5               0.0     111.87          1
23      8.0     -3.0           -1.0                                  779.5               0.0       9.87          1
Generating frontier for markets:   0%|                                                                      | 0/20 [02:44<?, ?it/s]
Traceback (most recent call last):
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 159, in <module>
    is_match, profit = market.check_match()
  File "/common/home/hg343/Research/accelerate_combo_option/src/market.py", line 79, in check_match
    is_match, profit = self.apply_mechanism(orders, offset=offset)
  File "/common/home/hg343/Research/accelerate_combo_option/src/market.py", line 93, in apply_mechanism
    time, num_model_Constraints, profit, isMatch, matched_order_index = self.mechanism_solver(orders, offset=offset)
  File "/common/home/hg343/Research/accelerate_combo_option/src/mechanism_solver.py", line 187, in mechanism_solver_combo
    breakpoint()
  File "/common/home/hg343/Research/accelerate_combo_option/src/mechanism_solver.py", line 187, in mechanism_solver_combo
    breakpoint()
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit