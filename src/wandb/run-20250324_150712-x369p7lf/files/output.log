
Generating frontier for markets:   0%|                                                                                             | 0/20 [00:00<?, ?it/s]
There are 25 buy orders and 25 sell orders
#####Generating combinatorial/book/STOCK_2_SEED_2_book_AAPL_MSFT.npy with size 50 and noise 0.015625#####
Starting async computation for iteration 0
RangeIndex(start=0, stop=50, step=1) RangeIndex(start=0, stop=50, step=1)
> /common/home/hg343/Research/accelerate_combo_option/src/mechanism_solver.py(188)mechanism_solver_combo()
-> assert len(set(buy_book_index) & set(sell_book_index)) == 0, "buy and sell book index should not have any shared index"
176  	def mechanism_solver_combo(orders : pd.DataFrame, offset : bool = True, debug=0):
177  	    '''
178  	    orders: pandas dataframe contains bid and ask orders; specify whether code requires standarizing this variable
179  	    offset: whether to offset the price by the offset value
180  	    debug: whether to debug
181  	    '''
182  	    buy_orders = orders.where(orders['transaction_type'] == 1)
183  	    sell_orders = orders.where(orders['transaction_type'] == 0)
184  	    buy_book_index = buy_orders.index
185  	    sell_book_index = sell_orders.index
186  	    print(buy_book_index, sell_book_index)
187  	    breakpoint()
188  ->	    assert len(set(buy_book_index) & set(sell_book_index)) == 0, "buy and sell book index should not have any shared index"
189  	    # Extract liquidity values before converting to numpy arrays
190  	    buy_liquidity = None
191  	    sell_liquidity = None
192  	    if 'liquidity' in buy_orders.columns:
193  	        buy_liquidity = buy_orders['liquidity'].values
194  	    if 'liquidity' in sell_orders.columns:
195  	        sell_liquidity = sell_orders['liquidity'].values
196  	    #
197  	    option_columns = [col for col in buy_orders.columns if col.startwith('option')]
198  	    option_columns.sort()
199  	    remaining_columns = ['C=Call, P=Put',
200  	                    'Strike Price of the Option Times 1000',
201  	                    'transaction_type',
202  	                    'B/A_price']
203  	    sorted_columns_order = option_columns + remaining_columns
204  	    opt_buy_book = buy_orders[sorted_columns_order].to_numpy()
205  	    opt_sell_book = sell_orders[sorted_columns_order].to_numpy()
206  	    num_buy, num_sell, num_stock = len(opt_buy_book), len(opt_sell_book), len(opt_buy_book[0])-4
207  	
208  	    # Add initial constraints
209  	    f_constraints = []
210  	    f_constraints.append(np.maximum(opt_buy_book[:, -4]*(np.concatenate(np.matmul(opt_buy_book[:, :-4], np.zeros((num_stock, 1))))-opt_buy_book[:, -3]), 0))
211  	    f_constraints.append(np.maximum(opt_buy_book[:, -4]*(np.concatenate(np.matmul(opt_buy_book[:, :-4], sys.maxsize*np.ones((num_stock, 1))))-opt_buy_book[:, -3]), 0))
212  	    g_constraints = []
213  	    g_constraints.append(np.maximum(opt_sell_book[:, -4]*(np.concatenate(np.matmul(opt_sell_book[:, :-4], np.zeros((num_stock, 1))))-opt_sell_book[:, -3]), 0))
214  	    g_constraints.append(np.maximum(opt_sell_book[:, -4]*(np.concatenate(np.matmul(opt_sell_book[:, :-4], sys.maxsize*np.ones((num_stock, 1))))-opt_sell_book[:, -3]), 0))
215  	    sub_obj = 1
216  	
217  	    try:
218  	        # Prime problem
219  	        model = Model("match")
220  	        model.setParam('OutputFlag', False)
221  	
222  	        # Decision variables with liquidity-based upper bounds
223  	        gamma = model.addVars(1, num_buy)  # sell to bid orders
224  	        delta = model.addVars(1, num_sell)  # buy from ask orders
225  	
226  	        # Set upper bounds based on liquidity
227  	        if buy_liquidity is not None:
228  	            for i in range(num_buy):
229  	                if pd.isna(buy_liquidity[i]) or buy_liquidity[i] is None:
230  	                    raise ValueError(f"Buy liquidity value {buy_liquidity[i]} is None or NaN at index {i}")
231  	                elif np.isinf(buy_liquidity[i]):
232  	                    gamma[0, i].ub = 1e6  # Large but finite value
233  	                else:
234  	                    try:
235  	                        gamma[0, i].ub = float(buy_liquidity[i])
236  	                    except (ValueError, TypeError):
237  	                        print(f"Warning: Invalid buy liquidity value {buy_liquidity[i]}. Setting to 1.0")
238  	                        gamma[0, i].ub = 1.0
239  	        else:
240  	            # Default upper bound of 1 if no liquidity specified
241  	            raise ValueError("No liquidity values provided for buy orders")
242  	
243  	        if sell_liquidity is not None:
244  	            for i in range(num_sell):
245  	                if pd.isna(sell_liquidity[i]) or sell_liquidity[i] is None:
246  	                    raise ValueError(f"Sell liquidity value {sell_liquidity[i]} is None or NaN at index {i}")
247  	                elif np.isinf(sell_liquidity[i]):
248  	                    delta[0, i].ub = 1e6  # Large but finite value
249  	                else:
250  	                    try:
251  	                        delta[0, i].ub = float(sell_liquidity[i])
252  	                    except (ValueError, TypeError):
253  	                        print(f"Warning: Invalid sell liquidity value {sell_liquidity[i]}. Setting to 1.0")
254  	                        delta[0, i].ub = 1.0
255  	        else:
256  	            # Default upper bound of 1 if no liquidity specified
257  	            raise ValueError("No liquidity values provided for sell orders")
258  	
259  	        # Add offset variable if needed
260  	        if offset:
261  	            L = model.addVars(1, 1, lb=-GRB.INFINITY, ub=GRB.INFINITY)  # Bounded instead of infinity
262  	        else:
263  	            L = model.addVars(1, 1, lb=0, ub=0)  # Fixed at 0 if no offset
264  	
265  	        # Constraint of 0
266  	        buy_sum = sum(delta[0,i]*g_constraints[0][i] for i in range(num_sell))
267  	        sell_sum = sum(gamma[0,i]*f_constraints[0][i] for i in range(num_buy))
268  	        model.addLConstr(sell_sum-buy_sum-L[0,0], GRB.LESS_EQUAL, 0)
269  	
270  	        # Define objective
271  	        expense = sum(delta[0,i]*opt_sell_book[i, -1] for i in range(num_sell))
272  	        gain = sum(gamma[0,i]*opt_buy_book[i, -1] for i in range(num_buy))
273  	        model.setObjective(gain-expense-L[0,0], GRB.MAXIMIZE)
274  	
275  	        # Sub problem
276  	        sub_model = Model("sub_match")
277  	        sub_model.setParam('OutputFlag', False)
278  	        M = 1000000
279  	        s = sub_model.addVars(1, num_stock)
280  	        f = sub_model.addVars(1, num_buy, lb=-GRB.INFINITY)
281  	        g = sub_model.addVars(1, num_sell)
282  	        I = sub_model.addVars(1, num_buy, vtype=GRB.BINARY)
283  	
284  	        for i in range(num_sell):
285  	            sub_model.addLConstr(opt_sell_book[i, -4]*(sum(opt_sell_book[i, j]*s[0,j] for j in range(num_stock))-opt_sell_book[i, -3])-g[0, i], GRB.LESS_EQUAL, 0)
286  	        for i in range(num_buy):
287  	            sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])+M*(1-I[0, i])-f[0, i], GRB.GREATER_EQUAL, 0)
288  	            sub_model.addLConstr(M*I[0, i]-f[0, i], GRB.GREATER_EQUAL, 0)
289  	            sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])+M*(1-I[0, i]), GRB.GREATER_EQUAL, 0)
290  	            sub_model.addLConstr(opt_buy_book[i, -4]*(sum(opt_buy_book[i, j]*s[0,j] for j in range(num_stock))-opt_buy_book[i, -3])-M*I[0, i], GRB.LESS_EQUAL, 0)
291  	
292  	        it = 0
293  	        start = timeit.default_timer()
294  	        while sub_obj > 0.0005:
295  	            # Add newly generated constraint
296  	            buy_sum_new = sum(delta[0,i]*g_constraints[-1][i] for i in range(num_sell))
297  	            sell_sum_new = sum(gamma[0,i]*f_constraints[-1][i] for i in range(num_buy))
298  	            model.addLConstr(sell_sum_new-buy_sum_new-L[0,0], GRB.LESS_EQUAL, 0)
299  	
300  	            try:
301  	                model.optimize()
302  	            except Exception as e:
303  	                print(f"Optimization error in main model: {e}")
304  	                return 0, 0, 0, False, {'buy_book_index': [], 'sell_book_index': []}
305  	
306  	            # Save decision variables from prime problem
307  	            gamma_val = np.array([max(gamma[0, i].x, 0) for i in range(num_buy)])
308  	            delta_val = np.array([max(delta[0, i].x, 0) for i in range(num_sell)])
309  	            L_val = L[0,0].x
310  	
311  	            if debug == 2:
312  	                print(gamma_val)
313  	                print(delta_val)
314  	                print(L_val)
315  	
316  	            # Define sub obj
317  	            sub_model.setObjective(sum(gamma_val[i]*f[0, i] for i in range(num_buy))-sum(delta_val[i]*g[0, i] for i in range(num_sell))-L_val, GRB.MAXIMIZE)
318  	
319  	            try:
320  	                sub_model.optimize()
321  	            except Exception as e:
322  	                print(f"Optimization error in sub model: {e}")
323  	                return 0, 0, 0, False, {'buy_book_index': [], 'sell_book_index': []}
324  	
325  	            if debug > 0:
326  	                if it % 100 == 0:
327  	                    print([s[0, i].x for i in range(num_stock)])
328  	                    print('{}: objective is {} > 0'.format(it, sub_model.objVal))
329  	                if debug == 2:
330  	                    for i in range(num_buy):
331  	                        print('I:', I[0, i].x)
332  	                        print('f:', f[0, i].x)
333  	                    for i in range(num_sell):
334  	                        print('g:', g[0, i].x)
335  	
336  	            # Save decision variables from sub problem
337  	            f_constraints.append(np.array([f[0, i].x for i in range(num_buy)]))
338  	            g_constraints.append(np.array([g[0, i].x for i in range(num_sell)]))
339  	            sub_obj = sub_model.objVal
340  	            it += 1
341  	
342  	        stop = timeit.default_timer()
343  	        time = stop - start
344  	
345  	        # Print matching result
346  	        if debug == 1:
347  	            revenue = 0
348  	            for i in range(num_buy):
349  	                if gamma[0, i].x > 0:
350  	                    revenue += gamma[0,i].x * opt_buy_book[i, -1]
351  	                    print('Sell {} to {}({}{}+{}{},{}) at bid price {}'.format(round(gamma[0,i].x, 4), 'C' if opt_buy_book[i, -4]==1 else 'P', \
352  	                        opt_buy_book[i, 0], s1, opt_buy_book[i, 1], s2, opt_buy_book[i, -3], opt_buy_book[i, -1]))
353  	            for i in range(num_sell):
354  	                if delta[0, i].x > 0:
355  	                    revenue -= delta[0,i].x * opt_sell_book[i, -1]
356  	                    print('Buy {} from {}({}{}+{}{},{}) at ask price {}'.format(round(delta[0,i].x, 4), 'C' if opt_sell_book[i, -4]==1 else 'P', \
357  	                        opt_sell_book[i, 0], s1, opt_sell_book[i, 1], s2, opt_sell_book[i, -3], opt_sell_book[i, -1]))
358  	            print('Revenue at T0 is {}; L is {}; Objective is {} = {}'.format(round(revenue,2), round(L[0,0].x, 2), round(revenue-L[0,0].x, 2), round(model.objVal, 2)))
359  	
360  	    except GurobiError as e:
361  	        print('Error code ' + str(e.errno) + ": " + str(e))
362  	        return 0, 0, 0, False, {'buy_book_index': [], 'sell_book_index': []}
363  	    except AttributeError:
364  	        print('Encountered an attribute error')
365  	        return 0, 0, 0, False, {'buy_book_index': [], 'sell_book_index': []}
366  	
367  	    # Check if model was successfully created and optimized
368  	    if 'model' not in locals() or model is None:
369  	        return 0, 0, 0, False, {'buy_book_index': [], 'sell_book_index': []}
370  	
371  	    # Check for matches
372  	    isMatch = any(delta[0,i].x > 0 for i in range(len(delta))) or any(gamma[0,j].x > 0 for j in range(len(gamma)))
373  	    matched_stock = {'buy_book_index': None, 'sell_book_index': None}
374  	    matched_stock['buy_book_index'] = [buy_book_index[i] for i in range(len(gamma)) if gamma[0, i].x > 0]
375  	    matched_stock['sell_book_index'] = [sell_book_index[i] for i in range(len(delta)) if delta[0, i].x > 0]
376  	
377  	    return time, model.NumConstrs, model.objVal, isMatch, matched_stock
    option1  option2  C=Call, P=Put  Strike Price of the Option Times 1000  transaction_type  B/A_price  liquidity
0      -3.0      5.0           -1.0                                  150.0               1.0      68.04        1.0
1       1.0      3.0            1.0                                  411.0               1.0      63.33        1.0
2       5.0     -8.0           -1.0                                  372.0               1.0     460.67        1.0
3       2.0     -1.0           -1.0                                  238.0               1.0      36.19        1.0
4      -2.0      9.0            1.0                                  496.5               1.0     156.18        1.0
5       1.0      7.0            1.0                                  715.0               1.0     186.12        1.0
6       2.0     -1.0           -1.0                                  221.0               1.0      19.82        1.0
7       6.0      5.0            1.0                                 1275.0               1.0     182.73        1.0
8       3.0      1.0            1.0                                  461.0               1.0     107.05        1.0
9       1.0      1.0            1.0                                  263.0               1.0       0.52        1.0
10      4.0      1.0           -1.0                                  740.5               1.0      22.92        1.0
11      3.0      2.0            1.0                                  569.0               1.0     106.16        1.0
12      3.0      1.0           -1.0                                  622.5               1.0      53.02        1.0
13      2.0     -1.0           -1.0                                  190.5               1.0       2.35        1.0
14      1.0     -2.0           -1.0                                    6.0               1.0      65.73        1.0
15      7.0      6.0            1.0                                 1348.0               1.0     371.95        1.0
16      2.0      1.0           -1.0                                  347.0               1.0       0.02        1.0
17      7.0      5.0           -1.0                                 1842.5               1.0     226.09        1.0
18      1.0      1.0           -1.0                                  319.5               1.0      57.90        1.0
19     -2.0      7.0            1.0                                  269.0               1.0     169.38        1.0
20     -5.0      7.0           -1.0                                   20.5               1.0      28.41        1.0
21      1.0      6.0           -1.0                                  878.0               1.0      73.64        1.0
22      4.0      9.0            1.0                                 1420.0               1.0     156.52        1.0
23      5.0     -3.0            1.0                                  353.0               1.0      90.72        1.0
24      8.0      5.0           -1.0                                 1597.0               1.0       0.30        1.0
25      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
26      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
27      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
28      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
29      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
30      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
31      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
32      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
33      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
34      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
35      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
36      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
37      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
38      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
39      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
40      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
41      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
42      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
43      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
44      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
45      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
46      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
47      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
48      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
49      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
    option1  option2  C=Call, P=Put  Strike Price of the Option Times 1000  transaction_type  B/A_price  liquidity
0       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
1       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
2       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
3       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
4       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
5       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
6       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
7       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
8       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
9       NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
10      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
11      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
12      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
13      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
14      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
15      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
16      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
17      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
18      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
19      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
20      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
21      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
22      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
23      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
24      NaN      NaN            NaN                                    NaN               NaN        NaN        NaN
25      2.0     -3.0           -1.0                                   38.5               0.0      53.73        1.0
26      3.0      2.0           -1.0                                  821.5               0.0     149.36        1.0
27      8.0     -7.0            1.0                                  612.5               0.0      11.82        1.0
28      1.0     -1.0            1.0                                   83.5               0.0       1.03        1.0
29      1.0      1.0           -1.0                                  217.0               0.0       0.20        1.0
30      2.0     -3.0           -1.0                                    4.0               0.0      26.17        1.0
31      8.0     -5.0            1.0                                  530.0               0.0     174.67        1.0
32      3.0      8.0           -1.0                                 1484.0               0.0     176.88        1.0
33     -1.0      8.0            1.0                                  356.5               0.0     340.83        1.0
34      2.0      1.0           -1.0                                  337.0               0.0       0.21        1.0
35     -1.0      7.0            1.0                                  494.0               0.0     101.33        1.0
36     -4.0      7.0            1.0                                  143.0               0.0      30.24        1.0
37      1.0      1.0           -1.0                                  180.5               0.0       0.03        1.0
38      6.0      1.0           -1.0                                  976.5               0.0      10.59        1.0
39      5.0     -1.0            1.0                                  726.5               0.0       4.05        1.0
40      1.0      4.0            1.0                                  454.5               0.0     124.20        1.0
41      2.0      1.0           -1.0                                  371.5               0.0       1.24        1.0
42      6.0      5.0            1.0                                 1520.0               0.0      13.98        1.0
43      2.0      1.0           -1.0                                  438.0               0.0      26.91        1.0
44      8.0     -1.0            1.0                                  825.5               0.0     296.32        1.0
45      2.0     -1.0            1.0                                  274.5               0.0       0.15        1.0
46      4.0      7.0            1.0                                 1308.0               0.0      69.58        1.0
47      3.0      1.0           -1.0                                  678.5               0.0     111.87        1.0
48      8.0     -3.0           -1.0                                  779.5               0.0       9.87        1.0
Generating frontier for markets:   0%|                                                                                             | 0/20 [03:23<?, ?it/s]
Traceback (most recent call last):
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor_forked.py", line 157, in <module>
    is_match, profit = market.check_match()
  File "/common/home/hg343/Research/accelerate_combo_option/src/market.py", line 80, in check_match
    is_match, profit = self.apply_mechanism(orders, offset=offset)
  File "/common/home/hg343/Research/accelerate_combo_option/src/market.py", line 94, in apply_mechanism
    time, num_model_Constraints, profit, isMatch, matched_order_index = self.mechanism_solver(orders, offset=offset)
  File "/common/home/hg343/Research/accelerate_combo_option/src/mechanism_solver.py", line 188, in mechanism_solver_combo
    assert len(set(buy_book_index) & set(sell_book_index)) == 0, "buy and sell book index should not have any shared index"
  File "/common/home/hg343/Research/accelerate_combo_option/src/mechanism_solver.py", line 188, in mechanism_solver_combo
    assert len(set(buy_book_index) & set(sell_book_index)) == 0, "buy and sell book index should not have any shared index"
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit