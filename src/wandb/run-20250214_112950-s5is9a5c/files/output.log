Generating frontier for markets:   0%|                                                                                                                                        | 0/20 [00:00<?, ?it/s]
Checking buy side options:   0%|                                                                                                                                              | 0/23 [00:00<?, ?it/s]
There are 25 buy orders and 25 sell orders
#####Generating combinatorial/book/STOCK_2_SEED_2_book_AAPL_MSFT.npy with size 50 and noise 0.015625#####
Starting async computation for iteration 0
Set parameter Username
Academic license - for non-commercial use only - expires 2025-11-08
RangeIndex(start=0, stop=25, step=1) {2, 15}
RangeIndex(start=0, stop=25, step=1) {4, 8, 9, 10, 15, 19, 20, 22}
23
17






Checking buy side options: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 23/23 [00:13<00:00,  1.74it/s]




Checking sell side options:  82%|████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                       | 14/17 [00:08<00:01,  1.85it/s]
> /common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor.py(505)<module>()

Checking sell side options: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 17/17 [00:09<00:00,  1.89it/s]
500  	                        column_names = ['option1', 'option2', 'C=Call, P=Put','Strike Price of the Option Times 1000', 'transaction_type','B/A_price']
501  	                        opt_buy_book = pd.DataFrame(opt_buy_book, columns = column_names)
502  	                        opt_sell_book = pd.DataFrame(opt_sell_book, columns = column_names)
503  	                        synthetic_combo_frontier_generation(opt_buy_book, opt_sell_book)
504  	                        breakpoint()
505  ->	                        async_result = pool.apply_async(run_with_timeout, (opt_buy_book, opt_sell_book, args.offset))
506  	                        tasks.update({'filename': [market_index,async_result]})
507  	                    for market_index, solving_result in tasks.values():
508  	                        market_index, async_result = solving_result
509  	                        try:
Generating frontier for markets:   0%|                                                                                                                                        | 0/20 [02:04<?, ?it/s]
Traceback (most recent call last):
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor.py", line 505, in <module>
    async_result = pool.apply_async(run_with_timeout, (opt_buy_book, opt_sell_book, args.offset))
  File "/common/home/hg343/Research/accelerate_combo_option/src/combo_stock_frontier_data_preprocessor.py", line 505, in <module>
    async_result = pool.apply_async(run_with_timeout, (opt_buy_book, opt_sell_book, args.offset))
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 88, in trace_dispatch
    return self.dispatch_line(frame)
  File "/common/home/hg343/anaconda3/lib/python3.9/bdb.py", line 113, in dispatch_line
    if self.quitting: raise BdbQuit
bdb.BdbQuit